//
//  ConstVariable.m
//  StudyChen
//
//  Created by xs on 2017/5/9.
//  Copyright © 2017年 Touker. All rights reserved.
//

#import "ConstVariable.h" // 常量 变量 各种类型数据 作用域 内存使用

@implementation ConstVariable

@end
/*
 常量:则表示一些固定的数据，也就是不能改变的数据。整型常量(int) /浮点型常量(float\double)/字符常量(char)/字符串常量/
    字符串常量属于 全局的，存放在常量区
 
 变量:

 2:变量的定义
    a:局部变量:不允许定义同名变量【不论其是不是相同类型】
        int a;int a; 错
        int a;double a; 错
    b:全局变量
        1:允许定义同类型同名变量，即时全局变量的重复定义【适用于所有文件】
           static int abc;static int abc; 对
        2:不允许定义不同类型同名变量【同一文件内】
          int abc; static int abc; 错



 3:变量的初始化
    a:变量的初始化只能在其定义的时候初始化
    b:未经过初始化的局部变量其值是不确定的,但未经过初始化的全局变量 根据类型不同值不同 int 默认是0
    c:
 4:变量的作用域
    a:局部变量 的作用域为 从定义的那一行开始 到 代码块结束，static修饰的局部变量 则会延长是生命周期直到程序结束
    b:全局变量 根据 其修饰词，分为 所有 本文件可访问，跟 本程序全局可访问
    c:如果在.a 文件定义了一个全局变量，想在.b文件使用（默认是可以使用的，但使用前需要声明一下告诉编译器，因为编译器是单文件编译的）
    d:访问一个变量a,会就近原则访问

 5:变量的存储的位置分
 
 
 
特殊关键字
 1:extern  static 对函数的作用
        extern（外部）
        a: 在函数声明之前加上此修饰 表面此函数是外部函数。可供其他文件使用,一般默认的都是外部函数，此关键字忽略不写
        b: 本文件要想使用其他文件的外部函数，必须进行声明【函数可重复声明】
        c: 注意程序中部允许有重名的外部函数
        static（内部）在函数声明之前加上此修饰 表面此函数是内部函数(静态函数)。只能本文件使用

 2:exten  static 对全局变量的作用【全局变量允许重复声明】
        a:使用前提 在C 中  默认情况下，一个函数不可以访问在它后面定义的全局变量，再其之前再定义一次达到声明的效果
        b: static int text; 只能用来定义一个内部全局变量，使用之前重复定义可达到声明的效果
        C: exten int text; 只能用来声明已经定义过而且能够访问的变量 ,并不能定义一个变量,先在当前文件查找有没有全局变量，没有找到，才会去其他文件查找，可以 在本文件想使用其他文件定义的全局变量,的时候使用

 3:const 修饰 变量， 被const修饰的变量是只读的，const仅仅用来修饰右边的变量,在编译时被处理，会编译检查，会报编译错
        a:使用规则:   a1:对基本数据类型的 变量 来说 const 的位置 只有在其变量前面 都可以 不论是在 数据类型 之前 还是之后，都是一样的效果;
                    a2:但对指针类型的变量而言 其位置的不同 也有三种不同的效果: int a = 10; int *p = &a;
                        1: int * const p = &a ====》 此时 p 的值是不允许修改的，就是说不能再指向其他地址
                        2: int const *p = &a ====》 此时 *p 的值是不允许修改的，就是说不能修改其所指向其他地址的值，但能改指向的地址
                        3: const int *p = &a ====》 此时 p / *p 的值都是可以修改的
        b:实际使用 常常与 extern static结合使用 生成可全局使用不可修改的全局常量
                    extern  char *const text = "abc";
 4:typedef 可以使用typedef关键字为各种数据类型定义一个新名字(别名)。
 
 
 
 
 

 */
