//
//  NO1工程文件.m
//  NO1
//
//  Created by xs on 2017/11/27.
//  Copyright © 2017年 Touker. All rights reserved.
//
// 那么多语言 ，语言的根本在哪。。。（根本--形式）
// React Native...ios andorid .工具链。。。控件，渲染（opneGL）。。。种种技术。。这些最基本的技术是什么？
// 对于知识点（1:起源是为了解决什么问题的 2:解决方案，及知识点的形成是怎么来的 原理 利用了什么解决了什么问题）
// 对于工具（1:这个工具解决了什么问题，这个工具利用了什么知识点原理，会用工具 但不知道原理是最可怕的）

/*
 0:学习，盲目学习别人的工具，API
 
 
 如果仅仅跟着新的 API 和库作者的脚步学习，永远只能被牵着鼻子走，更何况大部分框架和思想早已存在，新出的库不过是从一种语言转到另一种语言，也就是所谓的炒冷饭，本质上并没有变。CS 基础越扎实的人，越能够快速吸收掌握新的知识与技术。
 
 
 
 
 事实上，无论那些工具和框架变得有多么快，最基础的知识是一直都不会变的。我们应该把注意力放在怎样去解决问题，放在问题本身，而不是纠结于工具。要知道，工具肯定会一直变，唯解决问题的方法与思路不会变。现在风头正劲的React可能过几年就会消失，但是JavaScript会接着活下去。即使JavaScript有一天也被遗弃，算法、数据结构和那些设计模式也会长久存在。所以，从长远来看，把更多的精力花在学习架构、设计模式以及算法数据结构等更基础的领域比总是追求那些新奇的框架工具要更加有利于我们的技能成长与职业发展。
 
 
 
 一个东西 你学习他的时候可能觉得他是 一个  作者为你介绍 他创造出来的 东西，恩 ，只要你学习他就好（但你知道他到底是个啥不，万一它就是 某个 根本呢，但不不知道就当新东西，新东西，新东西。。。好多新东西。。。好多工具，技术。。）
 
 繁华缭乱的各自知识框架-----（但你知道根本的知识框架吗）
 0:英文
 
 1:CS基础线
 
 2：语言
 C--OC-IOS技术栈
 
 
 3：工具链线
 IDE-包管理-测试-打包-发布-管理
 
 
 
 
 1:CS基础
 了解 CS 知识脉络与发展前景
 计算机科学导论
 计算机程序设计的构造和解释
 编码：隐藏在硬件背后的语言
 
 
 
 C语言
 Linux C编程一站式学习
 C程序设计语言
 C语言的科学和艺术
 C专家编程/C和指针/C陷阱与缺陷
 C语言接口与实现：创建可重用软件的技术
 C标准库
 
 
 理解计算机
 深入理解计算机系统
 程序员的自我修养：编译、链接、与库
 编程语言实现模式
 现代操作系统
 操作系统：精髓与设计原理
 编译原理
 UNIX环境高级编程
 数据库系统概念
 
 
 计算机网络
 图解 HTTP
 图解 TCP/IP
 计算机网络:自顶向下方法
 HTTP权威指南
 TCP/IP 详解 卷1~3
 UNIX 网络编程 卷1~2
 
 
 软件架构
 深入浅出设计模式
 设计模式
 重构：改善既有代码的设计
 算法
 
 数据结构与算法分析（C语言描述）
 算法引论：一种创造性的方法
 算法：C语言实现（第1～4部分）
 算法：C语言实现（第5部分）
 算法（第4版）
 编程珠玑
 算法导论
 
 
 
 2：计算机图像学，安全
 */

#import "NO1工程文件.h"

@implementation NO1____

@end

//在我个人的概念里面，高级 iOS 工程师的定义，其中 iOS 只占了一半，这一半是熟悉 Objective-C、Swift、Cocoa、Xcode、App Store 等等，其实就是 语言 + 工具链 + 生态 另一半，是 高级工程师，高级工程师是什么样的已经有很多的讨论了。

// 工程资源文件结构、资源文件介绍

// Xcode----工具链----App Store

// 知识原理 + IDE的使用
/**
 1：所以资源文件的形式 --- No2:中间文件分析 ---No3:最终文件分析

 No1:资源文件分析

 source(源文件)
 头文件:.h/:
 实现文件:.m/.c/.main/...:

 user interface()
 界面文件:.xib/.storyboard/:

 resource(资源文件)
 资源文件a:.xcassets/:
 资源文件b:(各种形式文本、图片，音频,)
 资源文件包:bundle:
 配置文件c:.plist/.xcconfig/:
 二进制文件:.a/.dylib/.tbd:
 结合体:.Framework:

 */

