//
//  XSNetworkInterface.m
//  XSHouseLease
//
//  Created by heartbeats on 2020/3/22.
//  Copyright Â© 2020 fang. All rights reserved.
//

#import "XSNetworkInterface.h"

@implementation XSNetworkResponse
- (NSString *)description{
     return [NSString stringWithFormat:@"<%@: %p, result: %@,message:%@,data:%@", NSStringFromClass([self class]), self,self.code ,self.message,self.data];
}
@end

@interface XSNetworkInterface()

@end

@implementation XSNetworkInterface

- (XSOperationParam *)paramModel{
    if (_paramModel == nil) {
        _paramModel = [[XSOperationParam alloc]init];
    }
    return _paramModel;
}
+ (id)interfaceWithOperationManager:(AFHTTPSessionManager *)aOperationManger{
    XSNetworkInterface *interface = [[self alloc] init];
    interface.operationManger = aOperationManger;
    return interface;
}

- (void)POST:(NSString *)URLString param:(NSDictionary *)aParam progress:(HBRequestProgress)downloadProgress callback:(HBCompletionBlock)callback {
    NSLog(@"URLString = %@ ;aParam = %@",URLString,aParam);
  
    [self.operationManger POST:URLString parameters:aParam headers:nil progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);

        if ([responseObject isKindOfClass:[NSDictionary class]]) {
            XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
            if (callback) callback(response,nil);
        }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSURLResponse *response = task.response;
        if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
            NSHTTPURLResponse *newresponse = (NSHTTPURLResponse *)response;
            if (error.code == -1011 && newresponse.statusCode == 301 && [XSUserServer sharedInstance].isLogin) {
                [XSUserServer exitLogin];
                [XSUserServer againLogin];
                NSLog(@"");

            }
        }
        if (callback) callback(nil,error);
    }];
//    [self.operationManger POST:URLString parameters:aParam progress:downloadProgress success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);
//
//        if ([responseObject isKindOfClass:[NSDictionary class]]) {
//            XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
//            if (callback) callback(response,nil);
//        }
//
//    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//        NSLog(@"error-%ld",error.code);
//        NSURLResponse *response = task.response;
//        if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
//            NSHTTPURLResponse *newresponse = (NSHTTPURLResponse *)response;
//            if (error.code == -1011 && newresponse.statusCode == 301 && [XSUserServer sharedInstance].isLogin) {
//                [XSUserServer exitLogin];
//                [XSUserServer againLogin];
//                NSLog(@"");
//
//            }
//        }
//        if (callback) callback(nil,error);
//    }];
    
}

- (void)GET:(NSString *)URLString param:(NSDictionary *)aParam progress:(HBRequestProgress)downloadProgress callback:(HBCompletionBlock)callback {
    NSLog(@"URLString = %@;aParam = %@",URLString,aParam);
    [self.operationManger GET:URLString parameters:aParam headers:nil progress:^(NSProgress * _Nonnull downloadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);

          if ([responseObject isKindOfClass:[NSDictionary class]]) {
               XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
               if (callback) callback(response,nil);
           }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"error:%ld\n%@",(long)error.code,error.userInfo);
          NSURLResponse *response = task.response;
          if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
              NSHTTPURLResponse *newresponse = (NSHTTPURLResponse *)response;
              if (error.code == -1011 && newresponse.statusCode == 301 && [XSUserServer sharedInstance].isLogin) {
                  [XSUserServer exitLogin];
                  [XSUserServer againLogin];
                  NSLog(@"");
              }
          }


          if (callback) callback(nil,error);
    }];
//    [self.operationManger GET:URLString parameters:aParam progress:downloadProgress success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);
//
//        if ([responseObject isKindOfClass:[NSDictionary class]]) {
//             XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
//             if (callback) callback(response,nil);
//         }
//    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//        NSLog(@"error:%ld\n%@",error.code,error.userInfo);
//        NSURLResponse *response = task.response;
//        if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
//            NSHTTPURLResponse *newresponse = (NSHTTPURLResponse *)response;
//            if (error.code == -1011 && newresponse.statusCode == 301 && [XSUserServer sharedInstance].isLogin) {
//                [XSUserServer exitLogin];
//                [XSUserServer againLogin];
//                NSLog(@"");
//            }
//        }
//
//
//        if (callback) callback(nil,error);
//
//    }];
}

- (void)loadImageWithURL:(NSString *)URLString imageUrl:(NSURL *)imageUrl param:(NSDictionary *)aParam progress:(HBRequestProgress)downloadProgress callback:(HBCompletionBlock)callback {
   
    [self.operationManger POST:URLString parameters:aParam headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        NSData *data =  [NSData dataWithContentsOfURL:imageUrl];
        UIImage *image =   [UIImage imageWithData:data];
        
        NSData *yasuodata = UIImageJPEGRepresentation(image, 0.5);
//        UIImage *yasuoImage = [UIImage imageWithData:data];
        
        if (data == nil) {
            data =  [NSData dataWithContentsOfFile:imageUrl.absoluteString];
        }
        if (data == nil) {
            NSLog(@"error-");
        }
        NSArray *strarray = [imageUrl.absoluteString componentsSeparatedByString:@"."];
        NSString *fileType = strarray.lastObject;

        NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
        formatter.dateFormat = @"yyyyMMddHHmmss";
        NSString *timestr = [formatter stringFromDate:[NSDate date]];
        NSString *fileName = [NSString stringWithFormat:@"%@.png",timestr];

        NSString *mimeType = [NSString stringWithFormat:@"image/*"];

        NSLog(@"fileName =%@,mimeType = %@",fileName,mimeType);
        [formData appendPartWithFileData:yasuodata name:@"file" fileName:fileName mimeType:mimeType];

    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
             XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
             if (callback) callback(response,nil);
         }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"error-%@",error);
        if (callback) callback(nil,error);
    }];

    
}


 -(NSString *)getMIMETypeWithCAPIAtFilePath:(NSString *)path{
    if (![[[NSFileManager alloc] init] fileExistsAtPath:path]) {
        return nil;
    }

    CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (__bridge CFStringRef)[path pathExtension], NULL);
    CFStringRef MIMEType = UTTypeCopyPreferredTagWithClass (UTI, kUTTagClassMIMEType);
    CFRelease(UTI);
    if (!MIMEType) {
        return @"application/octet-stream";
    }
    return (__bridge NSString *)(MIMEType)
    ;
}
 
- (void)loadImageWithURL:(NSString *)URLString image:(UIImage *)image param:(NSDictionary *)aParam progress:(HBRequestProgress)downloadProgress callback:(HBCompletionBlock)callback {
    NSLog(@"URLString = %@ ;aParam = %@",URLString,aParam);
 
//    [self.operationManger POST:URLString parameters:aParam constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
//        NSData *imageData = UIImageJPEGRepresentation(image, 0.7);
//
//
//        [formData appendPartWithFormData:imageData name:@"file.png"];
//
//
//     } progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//         if ([responseObject isKindOfClass:[NSDictionary class]]) {
//              XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
//              if (callback) callback(response,nil);
//          }
//     } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//         if (callback) callback(nil,error);
//
//     }];
    [self.operationManger POST:URLString parameters:aParam headers:nil constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
        NSData *imageData = UIImageJPEGRepresentation(image, 1);
        [formData appendPartWithFormData:imageData name:@"file.png"];

    } progress:^(NSProgress * _Nonnull uploadProgress) {
        
    } success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);
        if ([responseObject isKindOfClass:[NSDictionary class]]) {
             XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
             if (callback) callback(response,nil);
         }
    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
        NSLog(@"error-%@",error);
        if (callback) callback(nil,error);
    }];
     
    
}


//- (void)loadImageWithURL:(NSString *)URLString image:(UIImage *)image param:(NSDictionary *)aParam progress:(HBRequestProgress)downloadProgress callback:(HBCompletionBlock)callback {
//    NSLog(@"URLString = %@ ;aParam = %@",URLString,aParam);
//    if (image == nil) {
//        return;
//    }
//    [self.operationManger POST:URLString parameters:aParam constructingBodyWithBlock:^(id<AFMultipartFormData>  _Nonnull formData) {
//        NSData *imageData = UIImagePNGRepresentation(image);
//        NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
//        formatter.dateFormat = @"yyyy-MM-dd-HH-mm-ss";
//        NSString *timestr = [formatter stringFromDate:[NSDate date]];
//        [formData appendPartWithFileData:imageData name:@"file" fileName:[NSString stringWithFormat:@"image_%@.png",timestr] mimeType:@"image/png"];
//
////          NSString *path = [[NSBundle mainBundle]pathForResource:@"xaxaxax"ofType:@"png"];
////          NSURL *url=[NSURL  fileURLWithPath:path];
////           [formData appendPartWithFileURL:url  name:@"file" error:nil];
//    } progress:nil success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) {
//        NSLog(@"success-%@",responseObject);
//        if ([responseObject isKindOfClass:[NSDictionary class]]) {
//             XSNetworkResponse *response =  [XSNetworkResponse mj_objectWithKeyValues:responseObject];
//             if (callback) callback(response,nil);
//         }
//    } failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) {
//        NSLog(@"error-%@",error);
//        if (callback) callback(nil,error);
//
//    }];
//
//}
@end

/*ASCIIå­ç¬¦é

  





48ï½57:0-9
65ï½90:A-Z
97ï½122:a-z
 
 */
/*
 ååï¼
 IP:
 ç«¯å£å·ï¼
 æä»¶è·¯å¾(æä»¶è¡¨ç¤º)ï¼
 */



/*
 æ¯ä¸æ¯ä¸ä¸ªurlï¼ä¿¡æ¯çæ­£ç¡®è¡¨è¾¾-ç¼ç ï¼
 urlåé¨åçå«ä¹ï¼ä¿¡æ¯çæ­£ç¡®è§£æ-ç¼ç ï¼
 æ¯ä¸æ¯ä¸ä¸ªææçurlï¼æå¡å¨ï¼
 
 
 
 URLéå¸¸è¢«åæå¦ä¸å½¢å¼ï¼<æ¹æ¡>:<æ¹æ¡æè¿°é¨å>
 æ¹æ¡ï¼ä¸ä¸ªURLåå«äºå®ä½¿ç¨çæ¹æ¡åç§°ï¼<æ¹æ¡>ï¼
 æ¹æ¡æè¿°ï¼å¨æ¹æ¡å¶åç´§è·ä¸ä¸ªåå·ï¼ç¶åæ¯ä¸ä¸ªå­ç¬¦ä¸²ï¼è¿é¨åçè§£éç±æä½¿ç¨çæ¹æ¡æ¥å³å®

 ç¹æ®æ¹æ¡
 ä¸äºå·²ç»å­å¨çæ ååè®®åæ­£å¤äºè¯éªä¸­çåè®®ä¹é´çæ å°å³ç³»çè½®å»ç¨BNFè¯­æ³å®ä¹è¿è¡æè¿°
 
 
 éç¨æ¹æ¡è¯­æ³:
 è½ç¶URLå¶ä»é¨åçè¯­æ³å æ¹æ¡çä¸åèä¸åï¼
 ä½é£äºç´æ¥ä½¿ç¨åºäºIPçåè®®æ¥å®ä½å ç¹ç½ä¸çä¸»æºçURLæ¹æ¡é½ä½¿ç¨äºå¦ä¸å½¢å¼çéç¨è¯­æ³æ¥è¡¨ç¤ºç¹å®çæ¹æ¡æ°æ®ï¼
 <scheme>:// <user>:<password>@  <host> :<port> /<path>  ;<params> ?<query>  #<frag>
1.ä¸åçåè®® å¶åé¢é¨åä¸å
 <user>:<password>@ :FTPåè®®éè¦è¿ä¸ª  ;<params> :FTPåè®®éè¦è¿ä¸ª
ä¾å¦:FTP://chen:123@www.baidu.com:80/ui/3;type=3?name=chen&old=18#aaa

 
 
  2.urlçè¡¨ç¤ºä»¥åç¼ç è§£ç ï¼è®¡ç®æºæä¹è¯å«æåçï¼

 1.æ´ä½ææåä¸ªé¨å åªè½ä½¿ç¨ASCIIå­ç¬¦éç¼ç çå«ä½å­èåºå:
 2.æ¯ä¸ªå­ç¬¦å¨æ¾ç¤ºä¸æä¸é¢2ç§æ¹å¼
  a:(ç´æ¥å­ç¬¦è¡¨ç¤º)ASCIIä¸­çå¯æ¾ç¤ºå­ç¬¦
  b:(éè¿%åå ä¸¤ä¸ªåå­è¿å¶æ°å­çå½¢å¼)%E6%B7%B1%E5%9C
2.å¯¹ä¸å®å¨çå­ç¬¦è¿è¡ç¼ç ï¼ä¾å¦:"{", "}", "|", "\", "^","~","[", "]","`" ç©ºæ ¼
3.ä¿çå­ç¬¦ï¼
 1.è®¸å¤URLæ¹æ¡ä¿çäºä¸äºå­ç¬¦å¹¶èµäºç¹å®çå«ä¹ï¼å®ä»¬åºç°å¨URLçç¹å®é¨ä½å¹¶è¡¨ç¤ºç¹å®çå«ä¹
 2.";","/", "?", ":", "@", "=" å "&" å¯è½è¢«æä¸ªæ¹æ¡æä¿çï¼
 3.SOè¿äºä¿çå­ç¬¦ï¼å½åºç°å¨ ä¸æ¯ç¨ä½ä¿çç®çå°æ¹å¿é¡»è¿è¡ç¼ç 
4.æ°å­ å­æ¯  ç¨ä½ä¿çç®ççä¿çå­ç¬¦ ä»¥å$-_.+!*'()è¿äºç¹æ®å­ç¬¦ å¯ä¸è¿è¡ç¼ç 
5.ä¸å¿è¿è¡ç¼ç çå­ç¬¦ï¼åæ¬å­æ¯ä¸æ°å­ï¼å¦æåºç°å¨URLçç¹å®é¨ä½ï¼åªè¦å®ä»¬ä¸ç¨ä½ä¿çç®çï¼åå¯è¿è¡ç¼ç 
6.æç»çè§£å³æ¹æ¡ URLçç¼ç  è§£ç 
 1.åç§æå­æ¾ç¤ºç-->ç¼ç -->ä¼ è¾
 2.ä¼ è¾è¿æ¥ç-->ç¼ç -->æ¾ç¤º
 url encodeï¼
 
 3.æå¡ç«¯ä¸å®¢æ·ç«¯ å¨ç¼ç è§£ç ä¸ççº¦å®ä¸é®é¢
 1.æ²¡æ æè å¤æ¬¡ç¼ç  è§£ç  é æ
 
 5.URLä¸­åé¨åçå«ä¹ å·²ç»è¡¨è¾¾ç¼ç æ¹å¼
 1.åè®®-schem:è·åèµæºæ¶ä½¿ç¨çåè®®
  a.(å¬ç¨åè®®)å¤§å®¶å±è¯çURLåè®®ï¼ è¿äºå·²ç»è¢«å¤§å¤æ°ç³»ç»æ¶ééçº³äº æ¯å¦HTTP/tel/sms

  
  
  4.<user>:<password>:
  a.æäºåè®®éè¦(ç¨æ·å:å¯ç )æå¯ä»¥è·åèµæº;
  b.ç¨æ·åï¼åå¯ç ï¼å¦æå­å¨çè¯ï¼å¶åç´§è·ä¸ä¸ªåç¨ç¬¦å·â@â;
  c.å¨ç¨æ·ååå¯ç å­æ®µä¸­åºç°çä»»ä½â:âï¼â@âæèâ/âé½è¦è¿è¡ç¼ç ;
  d.æ³¨æç©ºçç¨æ·åæèå¯ç ä¸åäºæ²¡æç¨æ·ååå¯ç ï¼å³ä¸è½å¨æ²¡ææå®ç¨æ·åçæåµä¸æå®å¯ç 
  

  
  Host:è®¿é®çååæèIPå°å
  0.åªä¸æ®µç®host:
  1.ååçè¡¨ç¤ºè§å:
  2.IPçè¡¨ç¤ºè§å:
  3.åååIPçæ­£ç¡®åºå:
  
  Port:ç«¯å£å·
  1.å¤§é¨åæ¹æ¡é½ç»åè®®æå®ä¸ä¸ªé»è®¤çç«¯å£ã
  2.ä¹å¯ä»¥éææå®ä¸ä¸ªåè¿å¶å½¢å¼çç«¯å£ï¼å¹¶ç¨åå·ä¸ä¸»æºéå¼ã
  3.å¦æå¿½ç¥ç«¯å£ï¼é£ä¹è¿ä¸ªåå·ä¹è¦å¿½ç¥ã
   http://www.baidu.com
   http://www.baidu.com:
   http://www.baidu.com:80
  
  
  Path:æä»¶èµæºè·¯å¾
  0.æ³¨æä¸»æºï¼æç«¯å£ï¼ä¸urlï¼è·¯å¾é´çâ/âä¸æ¯urlï¼è·¯å¾çä¸é¨å
  1.è·¯å¾çè¯­æ³ä¾èµäºæä½¿ç¨çæ¹æ¡ãä¹ä¾èµäºå®å¨æ¹æ¡ä¸­çè§£éæ¹æ³
  
  params:è¢«æäºåè®®ç¨æ¥æå®è¾å¥åæ°ï¼åæ°æ¯ å/å¼å¯¹ï¼ä¸ä¸ªURLå¯ä»¥åå«å¤ä¸ªåæ°å¯¹ï¼ç¨"ï¼"å å¶ä»çåæ°å¯¹åé
  query:è¢«æäºåè®®ç¨æ¥æå®è¾å¥åæ°ï¼åæ°æ¯ å/å¼å¯¹ï¼ä¸ä¸ªURLå¯ä»¥åå«å¤ä¸ªåæ°å¯¹ï¼ç¨"ï¼"å å¶ä»çåæ°å¯¹åé
  frag:èµæºçä¸é¨åçä¸ä¸ªåç§°,ä¸ä¼è¢«æäº¤å°æå¡å¨ï¼ä½¿ç¨"#"åéï¼ä¾å¦ç½é¡µä¸­çâä¹¦ç­¾âï¼ç¨æ¥è·³è½¬å°ä¸ä¸ªç½é¡µçæå®ä½ç½®
 

 

 
 3.æä¹æç®ä¸ä¸ªurl
 a.æ¯ä¸ä¸ªurl(è½å»è§£æç)
 1.å¨è¡¨ç¤ºä¸é¦å å¶ä¸­è¯å®ä¸è½æ urlä¸è½è¯å«çå­ç¬¦ æ¯å¦:ç©ºæ ¼ æ±å­ç­
 2.å¨çº¯è¯­æ³å±åªäºæ¯å¯ä»¥çç¥ç
 3.å¨ä¸åçç¯å¢ä¸ï¼æ¯å¦è½å¤æ­å¶æ¯å¦æ¯ä¸ä¸ªurléè¦çå½åçç³»ç»å¤ç
    2a:æ¯å¦æµè§å¨ä¸­ å¯ä»¥çç¥ åè®® ç«¯å£é¨å
    2b:å¨å¼åç¯å¢ä¸­ åä¸ä¸æ · ï¼@"http:"ï¼ï¼@"http://"ï¼ï¼@"://"ï¼å¨iosä¸­é½å¯ä»¥ç®ä½ä¸ä¸ªurl
 
4.æ¯å¦æ¯ä¸ä¸ªææçurl
 
 
 
 
 HTTP URL æ¹æ¡  http://<host>:<port>/<path>?<searchpart>
 
 */
