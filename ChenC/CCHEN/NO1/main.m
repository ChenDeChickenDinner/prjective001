//
//  main.m
//  NO1
//
//  Created by xs on 2018/10/9.
//  Copyright © 2018年 Touker. All rights reserved.
//

#import <Foundation/Foundation.h>
void text1();
void test2();
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        test2();
    }
    return 0;
}
/*
 1.计算机中的进制
 0.十进制:计算机编写中的数默认是十进制
 1.二进制:由 0~1 组成，以 0b/0B 开头 表示的是二进制
 2.八进制:由 0~7 组成，以 0 开头 表示的是八进制
 3.16进制:由0-9对应0-9，A/a-F/f对应10-15组成，以 0X/0x 开头 表示的是16进制

 int nuber = 100;      //默认十进制
 int number2 = 0b1100; //二进制
 int number3 = 014;    //八进制
 int number4 = 0xc;    //16进制

 二进制转十进制:
 0b1100 = 0 * 2的0次方 + 0 * 2的1次方 + 1 * 2的2次方+ 1 * 2的3次方


 N位二进制的取值范围
 1. 1位: 0 或者 1-->0~1
 2. 2位: 00/01/10/11-->0~3
 3. 3位: 000、001、010、011、100、101、110、111-->0~7
 4. n位:0~2的n次方-1
 */


/*(基本数据类型）
 整型
 1.int类型是有符号整形，他可以表示其范围内的所有整数，如-1，0，1等，int的取指范围因计算机系统而异。存储一个int值需要一个机器子长.
 2.C语言提供3个附属关键字修饰基本整数类型
 short(short int):短整型
 long(long int):长整型
 signed(igned int):有符号整形
 unsigned(unsigned int):无符号整形

 _Bool
 _Bool类型实际上也是一种整数类型，但是原则上它只占有一位存储空间，因为对0和1来讲，一位空间足够了。

 浮点型
 1.float类型的浮点数至少能表示六位有效数字，取值范围是10^(-37)~10^(37).
 2.double类型的最小取指范围和float类型相同，但是他必须至少能表示10位有效数字.
 3.默认情况下，编译器都假定浮点类型的常量是double类型的精度

 字符型
 1.char 类型用于储存字符，代表着字符类型，比如字母，标点符号，空格等，需要占用一个字节（8位）
 2.char类型实际上存储的是整数类型而不是字符类型，计算机是使用字符编码来处理字符数据的，char字符使用的编码方式是ASCII编码
ASCII码字符集 范围
 1.非显示字符
   0～31及127(共33个)是控制字符或通信专用字符，它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响。
 2.显示字符
32 空格
33~47:各种符号!"#$%&'()*+,-./
48～57:0123456789
58~64:各种符号:;<=>?@
65~90:A~Z
91~96:各种符号[\]^_`
97～122:z~z
123~126:各种符号{|}~

1.所有的ASCII码都可以用“\”加数字（一般是8进制数字）来表示
2.而C中定义了一些字母前加"\"来表示常见的那些不能显示的ASCII字符
3.在存储中也将转义字符 按照 其ASCII 值 转换成对应的 二进制数
    a:控制类，对无法输入的控制字符进行转义  \n: 换行
    b:二义性，因为语言将一些 可显示字符 别做他用，如\:转义字符的开头, ':字符常量的括号, ":字符串的括号,所以在需要显示他们的时候为了区分，必须将其转义  '\\':'\'': '\"':     '\?':
 转义字符  意义  ASCII码值（十进制）
 \a 响铃(BEL) 007
 \b 退格(BS) ，将当前位置移到前一列 008
 \f 换页(FF)，将当前位置移到下页开头 012
 \n 换行(LF) ，将当前位置移到下一行开头 010
 \r 回车(CR) ，将当前位置移到本行开头  013
 \t 水平制表(HT) （跳到下一个TAB位置）009
 \v 垂直制表(VT)011
 \\ 代表一个反斜线字符''\'     092
 \' 代表一个单引号（撇号）字符  039
 \" 代表一个双引号字符  034
 \? 代表一个问号       063
 \0 空字符(NULL)      000
 \ddd 1到3位八进制数所代表的任意字符三位八进制
 \xhh 1到2位十六进制所代表的任意字符二位十六进制




 */
void test(){


    int value = 11;
    short int value2 = 12;
    long int value3 = 13;
    long long int value4 = 14;
    signed int value51 = 15;
    unsigned int value52 = 15;



    /*
     1.char类型占一个字节, 一个中文字符占3字节(unicode表),所有char不可以存储中
     2.除转义字符以外, 不支持多个字符
     3.char类型存储字符时会先查找对应的ASCII码值, 存储的是ASCII值, 所以字符6和数字6存储的内容不同
     */
    char charStr11 = '1';
    char charStr12 = 'a';

//    char charStr21 = ''; 保存字符不能为空
    char charStr22 = ' '; // 这是空格字符，是显示字符 ASCII值 为 32
    char charStr23 = '\0'; // 这是空字符，是非显示字符 ASCII值 为 0
    printf("charStr22=%c,%d;\ncharStr23=%c,%d\n",charStr22,charStr22,charStr23,charStr23);

// 对于 ' " ? \  这四个被系统别做他用的 字符，在一些场景下 若造成 语法歧义 则需要转义表示
//    char charStr31 = ''';  ' 是字符表示符号 ，会造成语法歧义，编译器无法正常识别 所以需要用转义字符的方式表达输出
    char charStr32 = '\'';
    printf("charStr32=%c\n",charStr32);

//    char charStr42[] = """; "是 字符串的表示符号，会造成语法歧义，编译器无法正常识别
    char charStr41 = '"'; //  "是 字符串的表示符号，但在此处不会造成语法歧义，故无报错


    char charStr45 = '?';
    printf("charStr41=%c;charStr42=%c\n",charStr45,charStr45);

//    char charStr51 = '\'; "是 转义字符的表示符号，会造成语法歧义，编译器无法正常识别
    char charStr53 = '\\';


          
    _Bool valueX1 = true;
    _Bool valueX2 = false;


    /*
     1.枚举类型是一种基本数据类型,而不是一种构造类型,因为它不能再分解为任何基本类型，作为整型常量处理，称为枚举常量。
     2.枚举元素的值取决于定义时各枚举元素排列的先后顺序。默认情况下，第一个枚举元素的值为0，第二个为1，依次顺序加1。
     3.也可以在定义枚举类型时改变枚举元素的值
     */
//    1.定义类型
    enum person{
        man, // 注意枚举类型里面的值用逗号，结构体内部用分号
        woman
    };
//    2.定义变量
    enum person my = man;
    printf("my = %d\n",my);


    float valueY1 = 3.3f;
    double valueY2 = 2.33;



}

/**
 printf 函数的问题
 */
void test2(){
// 1.占位符 %
/*
1.一部分是正常字符,这些字符将按原样输出
2.一部分是格式化规定字符,以"%"开始,后跟一个或几个规定字符,用来确定输出内容格式
3.一部分是转义字符
 %[flags][width][.prec][F|N|h|l]type 、%[标志][输出最小宽度][.精度][长度]式样字符
flags 规定输出样式
 字符  字符名称    说明
1. - 减号    左对齐，右边填充空格(默认右对齐)
2. + 加号    在数字前增加符号 + 或 -
3. 0 数字零  将输出的前面补上0，直到占满指定列宽为止（不可以搭配使用“-”）
4.   空格   输出值为正时加上空格，为负时加上负号
5. # 井号   type是o、x、X时，增加前缀0、0x、0X; type是e、E、f、g、G时，一定使用小数点; type是g、G时，尾部的0保留

width
 (1)用十进制整数来表示输出的最少位数。（至多要输出这么多位！）
 (2)若实践位数多于界说的宽度：则按实践位数输出。
 (3)若实践位数少于界说的宽度：
 a.则右对齐，左边留空。
 b.有负号，左对齐，右边留空
 c.表示宽度的数字以0开端，则右对齐，左边留空

prec精度:
精度式样符以“.”开头，后跟十进制整数。意义是：假如输出数字，则表示小数的位数；若实践位数大于所界说的精度数，则四舍五进。若不敷则补0；假如输出的是字符，则表示输出字符的个数；若实践位数大于所界说的精度数，则截走超出的部分。


type:用于规定输出数据的类型
%d/%i :有符号的十进制整数
%o:无符号8进制整数(不输出前缀0）
%u:无符号10进制整数
%x:无符号16进制整数,不输出前缀0x

%f %lf :单精度浮点数和双精度浮点数
%e %E :科学计数法表示的数，此处"e"的大小写代表在输出时用的“e”的大小写
%g %G :有效位数，如：%.8g表示单精度浮点数保留8位有效数字

%c:字符型,可以把输入的数字按照ASCII码相应转换为对应的字符
%s:字符串,输出字符串中的字符直至字符串中的空字符（字符串以'\0‘结尾，这个'\0'即空字符）

%p:void *,以16进制形式输出指针

%%:不进行转换，输出字符‘%’（百分号）本身

%m:打印errno值对应的出错内容,(例: printf("%m\n"); )

h: 短整数(short int)
l: 长整数(long int) （此处如果与d搭配为%lld则为long long int（C99），与f搭配为%llf则为long double（C99））

*/
    printf("value = %d \n",32);
    printf("value = %% \n");

// 2.转义字符 ，在字符串中会被自动转换为相应操作命令
    printf("value = \' \n");
    printf("value = \" \n");
    printf("value = \? \n");
    printf("value = \\ \n");

}
