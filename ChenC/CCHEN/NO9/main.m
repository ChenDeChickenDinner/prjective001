//
//  main.m
//  NO9
//
//  Created by xs on 2018/10/16.
//  Copyright © 2018年 Touker. All rights reserved.
//

#import <Foundation/Foundation.h>


/**
 函数
 */
void test(){

/*
 函数格式
 返回值类型 函数名(参数类型 形式参数1，参数类型 形式参数2，…) {
     函数体;
     返回值;
 }
 函数参数

 形式参数
 1.在定义函数时，函数名后面小括号()中定义的变量称为形式参数，简称形参
 2.形参变量只有在被调用时才分配内存单元,在调用结束时,即刻释放所分配的内存单元。
 3.因此,形参只有在函数内部有效,函数调用结束返回主调函数后则不能再使用该形参变量

 实际参数
 1.在调用函数时, 传入的值称为实际参数，简称实参
 2.实参可以是常量、变量、表达式、函数等,无论实参是何种类型的量,在进行函数调用时,它们都必须具有确定的值,以便把这些值传送给形参
 3.因此应预先用赋值,输入等办法使实参获得确定值


 1.调用函数时传递的实参个数必须和函数的形参个数必须保持一致
 2.形参实参类型不一致, 会自动转换为形参类型
 3.当使用基本数据类型（char、int、float等）作为实参时，实参和形参之间只是值传递，修改形参的值并不影响到实参函数可以没有形参


  函数返回值
1.如果没有写返回值类型，默认是int
2.函数返回值的类型和return实际返回的值类型应保持一致。如果两者不一致,则以返回值类型为准,自动进行类型转换



函数的声明 实现
1.本质在使用这个函数之前 需要让编译器知道有这个函数存在

 声明
1.声明仅仅代表着告诉系统一定有这个函数, 和这个函数的参数、返回值是什么
2.格式 将自定义函数时{}之前的内容拷贝到调用之间即可
3.函数可以重复声明
4.函数声明可以写在函数外面,也可以写在函数里面, 只要在调用之前被声明即可
5.当被调函数的函数定义出现在主调函数之前时,在主调函数中也可以不对被调函数再作声明
6.特殊 如果被调函数的返回值是整型时,可以不对被调函数作说明,而直接调用,不推荐

 实现
1.实现代表着告诉系统, 这个函数具体的业务逻辑是怎么运作的


函数作用域
 */


/*
https://www.jianshu.com/p/139f8c8a7cac
 */
}

/**
 各种数据类型 作为函数参数
 */
void text2(){

    // 1.基本数据类型作为形成传递到函数 只能值传递

    // 2.
}
int main(int argc, const char * argv[]) {
    @autoreleasepool {

    }
    return 0;
}

