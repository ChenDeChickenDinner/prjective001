//
//  main.m
//  NO3
//
//  Created by xs on 2018/10/10.
//  Copyright © 2018年 Touker. All rights reserved.
//

#import <Foundation/Foundation.h>
void test2();
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        test2();
    }
    return 0;
}

/**
 运算符
 */
void test1(){
/*  算术运算符 + - * / %  ++ -- (加 减 乘 除 取余 自增 自减)
    1.计算机是以二进制存储数据的，以数据的补码存储，原码作为输出的；
    2.计算机只进行相同类型数据的计算；
    3.若数据类型不相同，计算机内部将进行一个隐式转换：由低精度转换为高精度的数据，即char--》int--》float--》--》double
 */
    // 一元运算符 代数符号
    int value1 = +1;
    int value2 = -1;
    // 二元符号
    int value31 = value1 + value2;
    int value42 = value1 - value2;
    int value51 = value1 * value2;
    int value52 = value1 / value2;
    int value53 = value1 % value2;
/*
 求余运算符, 参与运算的两个操作数必须都是整数, 不能包含浮点数
 求余运算符, 被除数小于除数, 那么结果就是被除数
 求余运算符, 运算结果的正负性取决于被除数,跟除数无关, 被除数是正数结果就是正数,被除数是负数结果就是负数
 求余运算符, 被除数为0, 结果为0
 求余运算符, 除数为0, 没有意义(不要这样写)
 */
    //自增自减
    int i = 1;
    int i2 = i++; // i先参与赋值，再自身+1
    printf("i = %d,i2 = %d\n",i,i2);

    int y = 1;
    int y2 = ++y;// i先自身+1，再参与赋值
    printf("y = %d,y2 = %d\n",y,y2);








 逻辑运算符
 &&、 与】】
 ||、或
 ！、 非

*/

/*
 三目运算符
 条件？语句1：语句2(功能分析：如果条件成立，就执行语句1，否则执行语句2。)
 */

/*
其它操作符
 1. ,  逗号操作符; 表达式,表达式,…
 2. .   点操作符; 对象.成员名
 3. []  数组;
 4. ()  表达式 参数表; (表达式）/函数名(形参表)
 4. (类型) 强制类型转换; (数据类型)表达式
 5. ->  成员选择（指针; 对象指针->成员名
 6. &   取地址运算符; &变量名
 7. *  取值运算符; *指针变量
 8. sizeof 长度运算符; sizeof(表达式)
 9. ; 表达式结束标志; 表达式;
 */

/*
sizeof可以用来计算一个变量或常量、数据类型所占的内存字节数(不是一个函数, 是一个运算符)
1.sizeof( 变量\常量 );
2.sizeof( 数据类型);
 */
    int a = 10;
    sizeof(10);
    sizeof(a);
    sizeof(int);
    sizeof(double);

/*
1.其功能是把多个表达式连接起来组成一个表达式,称为逗号表达式
2.逗号运算符会从左至右依次取出每个表达式的值
3.最后整个逗号表达式的值等于最后一个表达式的值
 */
    int x1 = 10,x2 = 11,x3;
    x3 = (x1 + 1,x2 + 1); // ()中是一个逗号表达式, 结果是最后一个表达式的值, 所以计算结果为12
    printf("x3 = %d\n",x3); // x3 = 12;
}

/**
 位运算
 1.程序中的所有数据在计算机内存中都是以二进制的形式储存的。
 2.位运算就是直接对整数在内存中的二进制位进行操作
 3.C语言提供了6个位操作运算符, 这些运算符只能用于整型操作数
 &    按位与    同1为1,否则为0
 |    按位或    有1为1,否则为0
 ^    按位异或    不同为1,否则为0
 ~    按位取反    0变1,1变0, 包括符号位
 <<    按位左移   各二进位全部左移若干位,高位丢弃，低位补0 (结果值可能会改变正负性)(=乘以2的n次方)
 >>    按位右移   符号位不变，全部右移,右边丢弃，最高位(为正数时补0，为负数时补0或是补1取决于编译系统的规定) (=除以2的n次方)
 */
void test2(){
    int XY1 = 9 & 5;
    int XY2 = 9 | 5;
    int XY3 = 9 ^ 5;
    int XY4 = ~9;

    printf("9 & 5 = %d\n",XY1);
    printf("9 | 5 = %d\n",XY2);
    printf("9 ^ 5 = %d\n",XY3);
    printf("~9 = %d\n",XY4);
    printf("%d\n", 8>>3); // = 8 *8
    printf("%d\n", 9<<1);

    /*
      1. 按位与(&):
     a.与1相&就保持原位，与0相&就为0===>准确知道某一个二进制位的值
     b.任何数和1进行&操作,得到这个数的最低位
     */

    /*
     2.按位异或(^):
     a.相同数值进行异或，结果肯定是0，比如9^9 = 0
     b.交换 9^5^6 == 9^6^5
     c.任何数值跟0进行异或，结果还是原来的数值，9^0 == 9
     d.9^5^9 = 9^9^5 = 0^5 =5
     */

    // 运用 判断奇偶 ;偶数 的二进制是以0结尾; 奇数 的二进制是以1结尾
    int a = 0;
    while (a <= 10) {
        int value = a & 1;
        if (value == 0) {
            printf("a = %d,value = %d为偶数\n",a,value);
        } else {
            printf("a = %d,value = %d为奇数\n",a,value);
        }
        a++;
    }

    // 二个数交互值
    int x = 10,y = 11;
    x = x ^ y; // 10^11
    y = x ^ y; // = (10^11) ^11 = 10;
    x = x ^ y ;// = (10^11) ^10 = 11;
    printf("x = %d,y = %d\n",x,y); // x = 11,y = 10;
}


/**
 表达式，语句
 1.表达式：由运算符和运算对象组成（运算对象是运算符的操作对象）
 2.语句：是c程序的基本构建块，一条语句相当于一条计算机指令，在C程序中，大部分语句都以“；”结尾
 3.复合语块（块）：由花括号括起来的一条或多条语句组成
 */


/**
  控制语句 选择结构
 */
void test3(){
    _Bool value = true;
    if (value) {
        printf("会执行这句\n");
    }
    printf("执行后面语句\n");


    if (value) {
        printf("要么执行这句\n");
    } else {
        printf("要么执行这句\n");
    }
    /*
    1.依次判断，且只会执行一个，后续都不会执行
    2.众多大括号中,只有一个大括号中的内容会被执行
    3.只有前面所有添加都不满足, 才会执行else大括号中的内容
     */
    if (value == 1) {

    } else if(value == 0){

    }else{

    }

    // 当if else后面只有一条语句时, if else后面的大括号可以省略，极其不推荐写法
    int age = 17;
    if (age >= 18)printf("开网卡\n");
    else printf("喊家长来开\n");

    // 因为if(10 > 2)后面有一个分号, 所以系统会认为if省略了大括号
    // if省略大括号时只能管控紧随其后的那条语句, 所以只能管控分号
    if(10 > 2);
    {
        printf("10 > 2");
    }
    // 输出结果: 10 > 2


}
/**
 控制语句 循环结构
 */
void test4(){




    /*
     do {
     循环体中的语句;
     能够让循环结束的语句;
     ....
     } while (循环控制条件 );
     1.首先不管while中的条件是否成立, 都会执行一次"循环体"
     2.执行完一次循环体,接着再次判断while中的条件是否为真, 为真继续执行循环体,为假跳出循环
     3.重复以上操作, 直到"循环控制条件"为假为止
     */
    int i = 1;
    do {
        printf("先来一发，哈哈哈\n");
        i++;
    } while (i<=10);




/*break、continue return 对选择 循环结构的影响
break：由于它是用来退出循环或者switch语句
continue：和break语句相似。所不同的是，它不是退出一个循环，而是开始循环的一次新迭代
return：直接退出整个函数
 */

/*
goto <#label#> 语句
 */
    int a = 0;
    comeBack :
    a++;
    if (a<=10) {
        printf("a = %d\n",a);
        goto comeBack;
    }

}
