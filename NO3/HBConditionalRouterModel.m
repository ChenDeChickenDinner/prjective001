//
//  HBConditionalRouterModel.m
//  HBStockWarning
//
//  Created by xs on 2017/5/24.
//  Copyright © 2017年 Touker. All rights reserved.
//

#import "HBConditionalRouterModel.h"
#import "HBSafeMutableArray.h"
#import "HBCheckSpeed.h"
/*
  TCP/IP的心脏是互联网层，这一层主要有IP 和 ICMP 二个协议组成

《 数据链路层/网络层 》
 数据链路层
 数据链路层的主要作用是在互连同一种数据链路的节点之间进行包传递，而一旦跨页多种数据链路，就需要借助网络层

 网络层
 网络层可以跨越不同的数据链路，实现二端节点之间的数据包传输，即 点对点 通信

 网络层 与 数据链路层 的关系
 数据链路只负责某一个区间之间的通信传输，而IP负责将数据包发送给最终的目标地址，如果 （旅行的行程表） 与 （火车票，飞机票） 的关系


 《网络层》IP协议----IP数据包
 (IPv4 IPv6)---相当于OSI参考模型中的第三层，网络层
 网络层的主要作用是“实现终端节点之间的通信”，这种终端节点之间的通信也叫，IP是实现多个数据链路之间的通信协议。

 IP的链接方式
 IP 为了实现简单化与高速化 采用 面向无链接的方式，为把数据包发送到最终目标地址，尽最大努力，然后 他并不做 最终收到与否的严重。
 IP 只负责将数据发送给目标主机，TCP则负责保证对端主机确实接收到数据


 《IPv4》
 目前的全球因特网所采用的协议族是TCP/IP协议族。IP是TCP/IP协议族中网络层的协议，是TCP/IP协议族的核心协议。目前IP协议的版本号是4(简称为IPv4，v，version版本)，它的下一个版本就是IPv6。



 <<IP地址的定义>> （ 11111111.11111111.11111111.11111111 ）
IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数

 
 <<IP地址的组成>>
 网络地址:在数据链路的每个段 配置不同的值，网络标识必须保证，相互连接的每个段的地址不相重复，而同段内相连的主句必须有相同的网络地址
 主机地址:则不允许在同一个网段内重复出现
 

<<在一个局域网中,两个比较特殊IP地址（网络地址 + 广播地址）>>
网络地址，是用于三层寻址的地址，它代表了整个网络本身，网络号是网段中的第一个地址，
广播地址，它代表了网络全部的主机。广播地址是网段中的最后一个地址，

例如在192.168.0.0，255.255.255.0这样的网段中，
网络地址是192.168.0.0，
广播地址是192.168.0.255。



 广播地址(Broadcast Address)
 是专门用于同时向网络中所有工作站进行发送的一个地址。在使用TCP/IP 协议的网络中，主机标识段host ID 为全1 的IP 地址为广播地址，广播的分组传送给host ID段所涉及的所有计算机。例如，对于10.1.1.0 （255.255.255.0 ）网段，其广播地址为10.1.1.255 （255 即为2 进制的11111111 ），当发出一个目的地址为10.1.1.255 的分组（封包）时，它将被分发给该网段上的所有计算机。

 本地广播----它不被路由发送，但会被送到相同物理网络段上的所有主机，IP地址的网络字段和主机字段全为1就是地址255.255.255.255
 直接广播----网络广播会被路由，并会发送到专门网络上的每台主机，IP地址的网络字段定义这个网络，主机字段通常全为1，如 192.168.10.255
 

 指向子网的广播
 指向子网的广播地址为主机号为全1且有特定子网号的地址。作为子网直接广播地址的IP地址需要了解子网的掩码。例如，如果路由器收到发往128.1.2.255的数据报，当B类网络128.1的子网掩码为255.255.255.0时，该地址就是指向子网的广播地址；但如果该子网的掩码为255.255.254.0，该地址就不是指向子网的广播地址。

 指向所有子网的广播
 指向所有子网的广播也需要了解目的网络的子网掩码，以便与指向网络的广播地址区分开。指向所有子网的广播地址的子网号及主机号为全1。例如，如果目的子网掩码为255.255.255.0，那么IP地址128.1.255.255是一个指向所有子网的广播地址。然而，如果网络没有划分子网，这就是一个指向网络的广播。

 
 

 <<子网掩码>>
由来：解决 用分类的方式而导致IP地址的严重浪费，将A,B,C类等分类中的 主机地址--->部分用做子网地址,子网掩码
作用：它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。
规则：子网掩码由1和0组成，且1和0分别连续。子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度
运用：子网掩码是用来判断任意两台计算机的ip地址是否属于同一子网络的根据。最为简单的理解就是两台计算机各自的ip地址与子网掩码进行and运算后，
得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯
 
 
 <<子网掩码表示方法>>
 1． 通过与IP地址格式相同的点分十进制表示, 如：255.0.0.0 或255.255.255.128

 2． 在IP地址后加上"/"符号以及1-32的数字，其中1-32的数字表示子网掩码中网络标识位的长度
 如：192.168.1.1/24 的子网掩码也可以表示为255.255.255.0
 子网掩码一般为255.255.255.0

 
 <<子网掩码为类>>
 一类是缺省（自动生成）子网掩码，
 缺省子网掩码即未划分子网，对应的网络号的位都置1，主机号都置0。
 A类网络缺省子网掩码：255.0.0.0
 B类网络缺省子网掩码：255.255.0.0
 C类网络缺省子网掩码：255.255.255.0

 一类是自定义子网掩码。
 自定义子网掩码是将一个网络划分为几个子网，需要每一段使用不同的网络号或子网号，实际上我们可以认为是将主机号分为两个部分：子网号、子网主机号。形式如下：
 未做子网划分的ip地址：网络号+主机号
 做子网划分后的ip地址：网络号+子网号+子网主机号
 也就是说ip地址在划分子网后，以前的主机号位置的一部分给了子网号，余下的是子网主机号。子网掩码是32位二进制数，它的子网主机标识用部分为全“0”。利用子网掩码可以判断两台主机是否在同一子网中。若两台主机的IP地址分别与它们的子网掩码相“与”后的结果相同，则说明这两台主机在同一子网中。
 
 

<<网关>>路由器IP地址
 网关实质上是一个网络通向其他网络的IP地址，根据子网掩码 判定两个网络中的主机是否处与不同的网络里。而要实现这两个网络之间的通信，则必须通过网关
 只有设置好网关的IP地址，TCP/IP协议才能实现不同网络之间的相互通信
 
 
  << 公有IP>>
 公有地址由Internet NIC负责，公有IP地址分配给注册并向NIC提出申请的组织机构使用，公有地址IP可以直接访问internet，大家可以打开电脑或者手机的浏览器，登录百度，搜索“IP地址查询”，就可以看到目前电脑正在使用的公有IP地址


 << 私有IP>>
 私有IP就是在本地局域网上的IP 与之对应的是公有IP（在互联网上的IP）,随着私有IP网络的发展，为节省可分配的注册IP地址，有一组IP地址被拿出来专门用于私有IP网络，称为私有IP地址。
 
 
 
 私有IP地址范围：
 A: 10.0.0.0~10.255.255.255 即10.0.0.0/8
 B:172.16.0.0~172.31.255.255即172.16.0.0/12
 C:192.168.0.0~192.168.255.255 即192.168.0.0/16
 这些地址是不会被Internet分配的，它们在Internet上也不会被路由，虽然它们不能直接和Internet网连接，但通过技术手段仍旧可以和 Internet通讯（NAT技术）。
 我们可以根据需要来选择适当的地址类，在内部局域网中将这些地址像公用IP地址一样地使用。在Internet上，有些不需要与 Internet通讯的设备，如打印机、可管理集线器等也可以使用这些地址，以节省IP地址资源。
 
 
 DHCP协议，即动态主机配置协议，会通过协议算法分配给一台主机一个IP地址，简单说就是动态分配，比如我们的设备连入无线路由器，那么无线路由器通过DHCP协议就会自动给设备分配一个http://192.168.xxx.xxx的私有IP地址。通过这个私有IP地址，路由器可以在网络层中分辨出谁是谁。注：这里的网络层说的是OSI七层结构中的网络层
 
 
 NAT协议，也就是网络地址转换协议。通过这个协议，我们可以让处于内网中的多个设备的内网IP对应到一个公有地址IP上去，从而实现对internet的访问。可以说NAT协议是对目前ipv4地址日渐枯竭起到一个缓解作用
 
 交换机工作于数据链路层，用来隔离冲突域，连接的所有设备同属于一个广播域（子网），负责子网内部通信。
 路由器工作于网络层，用来隔离广播域（子网），连接的设备分属不同子网，工作范围是多个子网之间，负责网络与网络之间通信。
 

 家用宽带路由器，其实是交换机和路由器的结合体，有两个网络层接口，一个连接运营商网络，物理上也就是wan口，IP地址由运营商分配。另一个连接家庭网络，没有物理接口，IP地址由自己通过路由器管理界面配置，一般默认是192.168.1.1
 那另外几个Lan口干什么用的？这就是交换机接口，和家庭网络接口相连，负责家庭网络内部通信。












 《IP协议》 技术点 （IP寻址、路由、IP分，组包）

 IP寻址
 在数据链路层，用MAC地址来标识同一个链路中的不同计算机，在网络层，用IP地址 来 标识连接到网络中的所有主机
 不论一台主机与哪种数据链路连接，其IP地址的形式都保持不变，即数据链路不会改变IP地址的形式
 在网桥或交换器等，物理层或者数据链路层，数据包转发的设备中，不需要设置IP地址



IP路由
 Ipv4并不区分作为网络终端的主机(host) 和网络中的中间设备如路由器中间的差别。每台电脑可以既做主机又做路由器。路由器用来联结不同的网络。所有用路由器联系起来的这些网络的总和就是互联网。 IPv4技术即适用于局域网(LAN) 也适用于广域网。一个IP包从发送方出发，到接送方收到，往往要穿过通过路由器连接的许许多多不同的网络。每个路由器都拥有如何传递IP包的知识，这些知识记录在路由表中。路由表中记录了到不同网络的路径，在这儿每个网络都被看成一个目标网络。路由表中记录由路由协议管理，可能是静态的记录比如由网络管理员写入的，也有可能是由路由协议动态的获取的。有的路由协议可以直接在IP协议上运行。 常用的路由协议有
 - 路由信息协议(Routing Information Protocol, RIP),
 - 开放式最短路径优先协议，Open Shortest Path Fast, OSPF) ，
 - 中介系统对中介系统协议(Intermediate System – Intermediate System, IS-IS) ,
 - 边界网关协议(Border Gateway Protocol, BGP) . 在网络负荷很重或者出错的情况下，路由器可以将收到的IP包丢弃。在网络负荷重的时候，同样一个IP包有可能由路由器决定走了不同的路径。路由器对每一个IP包都是单独选择路由的。这也提高了IP通信的可靠性。但单是IP层上的包传输，并不能保证完全可靠。IP包可能会丢失; 可能会有重复的IP包被接受方收到; IP包可能会走不同的路径，不能保证先发的先到; 接受方收到的可能是被分割了的IP包。在IP之上再运行TCP协议则解决这些缺点提供了一个可靠的数据通路


 路由控制
 路由器 根据IP地址中的网络地址 + 路由控制表的指明道路 达到发送IP包到目标端

 路由控制表
 记录着网络地址与下一步应该发送至路由器的地址
 静态路由控制：管理员手动刷新交换信息
 动态路由控制：路由器与其他路由器交换信息时自动刷新

 默认路由 主机路由 环回路由

 路由控制表的聚合
 路由聚合（也叫汇总）是让路由选择协议能够用一个地址通告众多网络，旨在缩小路由器中路由选择表的规模，以节省内存，并缩短IP对路由选择表进行分析以找出前往远程网络的路径所需的时间

 数据链路不同，MTU则相异
 每种数据链路的最大传输单位MTU都不尽相同，IP属于数据链路的上一层，不受限于不同的数据链路，IP抽象化了底层的数据链路





 IP包长
 IP包由首部(header)和实际的数据部分组成。数据部分一般用来传送其它的协议，如TCP，UDP，ICMP等。数据部分最长可为65515字节(Byte)(=2xx16 - 1 - 最短首部长度20字节) 。一般而言，低层(链路层) 的特性会限制能支持的IP包长。例如以太网(Ethernet)协议，有一个协议参数，即所谓的最大传输单元(Maximum Transfer Unit, MTU) ，为1518字节，以太网的帧首部使用18字节，剩给整个IP包(首部+数据部分)的只有1500字节。 还有一些底层网络只能支持更短的包长。这种情况下，IP协议提供一个分割(fragment)的可选功能。长的IP包会被分割成许多短的IP包，每一个包中携带一个标志(Fragmentid)。发送方(比如一个路由器) 将长IP包分割，一个一个发送，接送方(如另一个路由器)按照相应的IP地址和分割标志将这些短IP包再组装还原成原来的长IP包。

 IP分，组包
 因为各种数据链路的独特性，其各自的最大传输单位不同，每种链路对其所传输的数据包有大小限制，为了解决这个问题，IP进行分片处理，将IP包分成多个较小的IP包，
 分片的包到了对端目标地址后 再被组合起来传给上一层，即从IP的上层看，它可以忽略底层的问题，做到数据链路的抽象化。

 IP报文的分片与重组
 数据链路中 帧传递 一帧 有个最大MTU限制，当传输超过最大值的IP数据报文时候，就会将IP报文进行分片处理传输，经过分片处理的IP数据报在被重组时候 只能又目标主机进行，路由器虽然做分片 但不会进行重组。
 在传输途中 可能被多次 重组 分片
 IP首部中的 片偏移 字段表示分片之后 每个分片在用户数据中的相对位置和改分片之后是否还有后续其它分片，根据这个字段可以判断 一个IP数据报 是否 分片 以及当前分片为整个数据报的起始，中段 还是末尾


 路径MTU发现
 分片机制的不足，路由器承担的处理越来越多，不希望对IP数据包进行分片处理，且一旦某个分片丢失 整个数据报废，“ 路径MTU发现”：是指 发送端主机 到接收端主机 之间不需要分片时最大MTU大小，即路径中最小的MTU。
 1，第一次发生的数据包设置为 不可分片处理，发送后 丢弃，随后通过一个ICMP的不可达消息将数据链路上的MTU值发送给主机
 2，下次发送时候，将其设置为当前MTU，发送主机根据这个MTU对数据进行分片处理，如此反复，直到数据报被发送到目标主机为止没有再接受到任何ICMP。
 好处：只用在发送端进行分片处理，发送过程中不再被分片





 IPv4首部一般
 IPv4首部一般是20字节长。在以太网帧中，IPv4包首部紧跟着以太网帧，同时以太网帧首部中的协议类型值设置为080016。
 IPv4提供不同，大部分是很少用的选项，使得IPv4包首部最长可扩展到60字节(总是4个字节4个字节的扩展)


 Version －              4位字段，指出当前使用的 IP 版本。
 IP Header Length （IHL） ─ 指数据报协议头长度，表示协议头具有32位字长的数量。指向数据起点。正确协议头最小值为5。
 Type-of-Service ─         指出上层协议对处理当前数据报所期望的服务质量，并对数据报按照重要性级别进行分配。这些8位字段用于分配优先级、延迟、吞吐量以及可靠性。（即TOS）
 Total Length ─            指定整个 IP 数据包的字节长度，包括数据和协议头。其最大值为65,535字节。典型的主机可以接收576字节的数据报。
 Identification ─          包含一个整数，用于识别当前数据报。该字段由发送端分配帮助接收端集中数据报分片。
 Flags ─                   由3位字段构成，其中最低位（MF）控制分片，存在下一个分片置为1，否则置0代表结束分片。中间位（DF）指出数据包是否可进行分片。第三位即最高位保留不使用，但是必须为0。
 Fragment Offset ─        13位字段，指出与源数据报的起始端相关的分片数据位置，支持目标IP适当重建源数据报。
 Time-to-Live ─          是一种计数器，在丢弃数据报的每个点值依次减1直至减少为0。这样确保数据包无止境的环路过程（即TTL）。
 Protocol ─              指出在 IP 处理过程完成之后，有哪种上层协议接收导入数据包。
 Header Checksum ─       帮助确保 IP 协议头的完整性。由于某些协议头字段的改变，如生存期（Time to Live），这就需要对每个点重新计算和检验。Internet 协议头需要进行处理。
 Source Address ─       源主机IP地址。
 Destination Address ─  目标主机IP地址。
 Options ─ 允许 IP 支持各种选项，如安全性。
 Data ─ 包括上层信息。



 IPV6
 是为了根本解决IPV4地址耗尽的问题而被标准化的网际协议
 从IPV4 切换到IPV6极其耗时，需要将网络中所以主机和路由器的IP地址进行重新设置，IPV6不仅解决地址耗尽问题，甚至试图弥补IPV4中的绝大多数缺陷

 IPv6的地址长度为128b，是IPv4地址长度的4倍。于是IPv4点分十进制格式不再适用，采用十六进制表示。IPv6有3种表示方法。
 一、冒分十六进制表示法
 　　格式为X:X:X:X:X:X:X:X，其中每个X表示地址中的16b，以十六进制表示，例如：
 　　ABCD:EF01:2345:6789:ABCD:EF01:2345:6789
 　　这种表示法中，每个X的前导0是可以省略的，例如：
 　　2001:0DB8:0000:0023:0008:0800:200C:417A→ 2001:DB8:0:23:8:800:200C:417A
 二、0位压缩表示法
 　　在某些情况下，一个IPv6地址中问可能包含很长的一段0，可以把连续的一段0压缩为“::”。但为保证地址解析的唯一性，地址中”::”只能出现一次，例如：
 　　FF01:0:0:0:0:0:0:1101 → FF01::1101
 　　0:0:0:0:0:0:0:1 → ::1
 　　0:0:0:0:0:0:0:0 → ::
 三、内嵌IPv4地址表示法
 　　为了实现IPv4-IPv6互通，IPv4地址会嵌入IPv6地址中，此时地址常表示为：X:X:X:X:X:X:d.d.d.d，前96b采用冒分十六进制表示，而最后32b地址则使用IPv4的点分十进制表示，例如::192.168.0.1与::FFFF:192.168.0.1就是两个典型的例子，注意在前96b中，压缩0位的方法依旧适用


 IPv6报文的整体结构分为
 IPv6报头、扩展报头  上层协议数据 3部分。I
 Pv6报头是必选报文头部，长度固定为40B，包含该报文的基本信息；
 版本号    表示协议版本．值为6
 流量等级    主要用于QoS
 流标签    用来标识同一个流里面的报文
 载荷长度    表明该IPv6包头部后包含的字节数，包含扩展头部
 下一报头    该字段用来指明报头后接的报文头部的类型，若存在扩展头，表示第一个扩展头的类型，否则表示其上层协议的类型，它是IPv6各种功能的核心实现方法
 跳数限制    该字段类似于IPv4中的TTL，每次转发跳数减一，该字段达到0时包将会被丢弃
 源地址    标识该报文的来源地址
 目的地址    标识该报文的目的地址


 扩展报头是可选报头，可能存在0个、1个或多个，IPv6协议通过扩展报头实现各种丰富的功能；
 IPv6报文中不再有“选项”字段，而是通过“下一报头”字段配合IPv6扩展报头来实现选项的功能。
 使用扩展头时，将在IPv6报文下一报头字段表明首个扩展报头的类型，再根据该类型对扩展报头进行读取与处理。
 每个扩展报头同样包含下一报头字段，若接下来有其他扩展报头，即在该字段中继续标明接下来的扩展报头的类型，从而达到添加连续多个扩展报头的目的。
 在最后一个扩展报头的下一报头字段中，则标明该报文上层协议的类型，用以读取上层协议数据

 上层协议数据是该IPv6报文携带的上层数据，可能是ICMPv6报文、TCP报文、UDP报文或其他可能报文。




 协议、本地地址、本地端口、远程地址、远程端口。




 《寻址技术》

hosts产生
在引入DNS（Domain Name System，域名系统）之前，网络中的主机是将容易记忆的域名映射到IP地址并将它保存在一个共享的静态文件hosts中，再由hosts文件来实现网络中域名的管理。
最初Internet非常小，仅使用这个集中管理的文件就可以通过FTP为连入Internet的站点和主机提供域名的发布和下载。每个Internet站点将定期地更新其主机文件的副本，并且发布主机文件的更新版本来反映网络的变化。

Hosts文件
是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，
当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，
如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析
Hosts文件配置的映射是静态的，如果网络上的计算机更改了请及时更新IP地址，否则将不能访问

作用
 1、加快域名解析
 对于要经常访问的网站，我们可以通过在Hosts中配置域名和IP的映射关系，提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出IP，而不用请求网络上的DNS服务器

 2、方便局域网用户
 在很多单位的局域网中，会有服务器提供给用户使用。但由于局域网中一般很少架设DNS服务器，访问这些服务器时，要输入难记的IP地址。这对不少人来说相当麻烦。可以分别给这些服务器取个容易记住的名字，然后在Hosts中建立IP映射，这样以后访问的时候，只要输入这个服务器的名字就行了

 3、屏蔽网站
 有很多网站不经过用户同意就将各种各样的插件安装到你的计算机中，其中有些说不定就是木马或病毒。对于这些网站我们可以利用Hosts把该网站的域名映射到错误的IP或本地计算机的IP，这样就不用访问了。在WINDOWS系统中，约定 127.0.0.1 为本地计算机的IP地址, 0.0.0.0是错误的IP地



DNS域名系统
因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。
 通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。DNS协议运行在UDP协议之上，使用端口号53。

《域名》
DNS规定，域名中的标号都由英文字母和数字组成，每一个标号不超过63个字符，也不区分大小写字母。标号中除连字符（-）外不能使用其他的标点符号。级别最低的域名写在最左边，而级别最高的域名写在最右边。由多个标号组成的完整域名总共不超过255个字符。
域名系统是分层的，允许定义的子域。域组成的至少一个字，标签。如果有多个标签，标签必须用点分开。在一个域名中，最右边的标签，必须选择从列表中的名称的顶级域名，也被称为顶级域（中英文顶级域名或TLD）。前极右翼组成的标签，标签上有一些限制

域名的构成
 域名由两个或两个以上的词构成，中间由点号分隔开。最右边的那个词称为顶级域名。下面是几个常见的顶级域名及其用法：

 顶级域名
 顶级域名又分为两类：
 一是国家顶级域名（national top-level domainnames，简称nTLDs），
     200多个国家都按照ISO3166国家代码分配了顶级域名，例如中国是cn，美国是us，日本是jp等；


 二是国际顶级域名（international top-level domain names，简称iTDs），
     表示工商企业的 .Com .Top，
     表示网络提供商的.net，
     表示非盈利组织的.org，
     表示教育的.edu，
     以及没有限制的中性域名如.xyz等。
     大多数域名争议都发生在com的顶级域名下，因为多数公司上网的目的都是为了赢利。但因为自2014年以来新顶级域名的发展，域名争议案件数量增长幅度越来越大[5]  。为加强域名管理，解决域名资源的紧张，Internet协会、Internet分址机构及世界知识产权组织（WIPO）等国际组织经过广泛协商， 在原来三个国际通用顶级域名：（com）的基础上，新增加了7个国际通用顶级域名：firm（公司企业）、store（销售公司或企业）、Web（突出WWW活动的单位）、arts（突出文化、娱乐活动的单位）、rec (突出消遣、娱乐活动的单位）、info(提供信息服务的单位）、nom(个人），并在世界范围内选择新的注册机构来受理域名注册申请。

 二级域名
 二级域名是指顶级域名之下的域名，在国际顶级域名下，它是指域名注册人的网上名称，例如 ibm，yahoo，microsoft等；在国家顶级域名下，它是表示注册企业类别的符号，例如.top，com，edu，gov，net等。
 中国在国际互联网络信息中心（Inter NIC） 正式注册并运行的顶级域名是CN，这也是中国的一级域名。在顶级域名之下，中国的二级域名又分为类别域名和行政区域名两类。类别域名共7个， 包括用于科研机构的ac；用于工商金融企业的com、top；用于教育机构的edu；用于政府部门的 gov；用于互联网络信息中心和运行中心的net；用于非盈利组织的org。而行政区域名有34个，分别对应于中国各省、自治区和直辖市。

 三级域名用字母（ A～Z，a～z，大小写等）、数字（0～9）和连接符（－）组成， 各级域名之间用实点（.）连接，三级域名的长度不能超过20个字符。如无特殊原因，建议采用申请人的英文名（或者缩写）或者汉语拼音名 （或者缩写） 作为三级域名，以保持域名的清晰性和简洁性

《域名服务器》
实际上就是装有域名系统的主机。它是一种能够实现名字解析（name resolution）的分层结构数据库。
主域名服务器--负责维护一个区域的所有域名信息，是特定的所有信息的权威信息源，数据可以修改。
辅助域名服务器--当主域名服务器出现故障、关闭或负载过重时，辅助域名服务器作为主域名服务器的备份提供域名解析服务。辅助域名服务器中的区域文件中的数据是从另外的一台主域名服务器中复制过来的，是不可以修改的。
缓存域名服务器--从某个远程服务器取得每次域名服务器的查询回答，一旦取得一个答案就将它放在高速缓存中，以后查询相同的信息就用高速缓存中的数据回答，缓存域名服务器不是权威的域名服务器，因为它提供的信息都是间接信息。
转发域名服务器--负责所有非本地域名的本地查询。转发域名服务器接到查询请求后，在其缓存中查找，如找不到就将请求依次转发到指定的域名服务器，直到查找到结果为止，否则返回无法映射的结果。

优点
之所以域名解析不需要很长时间，是因为上网接入商，比如北京电信，河南电信等，为了要加速用户打开网页的速度，通常在他们的DNS服务器中缓存了很多域名的DNS记录。这样这个接入商的用户要打开某个网页时，接入商的服务器不需要去查询域名数据库，而是把自己缓存中的DNS记录直接使用，从而加快用户访问网站的速度。这是优点。

 缺点
 缺点是上网接入商ISP的缓存会存储一段时间，只在需要的时候才更新，而更新的频率没有什么标准。有的ISP可能1小时更新一次，有的可能长达一两天才更新一次。
 所以新注册的域名一般来说解析反倒比较快。因为所有的ISP都没有缓存，用户访问时ISP都是要查询域名数据库，得到最新的DNS数据。
 而老域名如果更改了DNS记录，但世界各地的ISP缓存数据却并不是立即更新的。这样不同ISP下的不同用户，有的可以比较快的获取新的DNS记录，有的就要等ISP缓存的下一次更新。

提供商
 最后要说明的一点是，DNS服务器和网页服务器可以是同一个提供商提供的，也可以是不同的。通常虚拟主机提供商也提供自己的DNS服务器，
 这样用户只要把自己的域名指向虚拟主机提供商自己的域名服务器就可以了。
 有的用户喜欢使用域名注册服务商提供的DNS服务器，这时候用户就要在域名注册商的DNS服务器中更改DNS记录，如A，MX记录等到虚拟主机提供商的IP地址



ARP （地址解析协议）
地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。
 主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；
 收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。
 地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，
 其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，
 使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。ARP命令可用于查询本机ARP缓存中IP地址和MAC地址的对应关系、添加或删除静态对应关系等。
 相关协议有RARP、代理ARP。NDP用于在IPv6中代替地址解析协议。


OSI模型把网络工作分为七层，IP地址在OSI模型的第三层，MAC地址在第二层，彼此不直接打交道。
 在通过以太网发送IP数据包时，需要先封装第三层（32位IP地址）、第二层（48位MAC地址）的报头，但由于发送时只知道目标IP地址，不知道其MAC地址，又不能跨第二、三层，所以需要使用地址解析协议。
 使用地址解析协议，可根据网络层IP数据包包头中的IP地址信息解析出目标硬件地址（MAC地址）信息，以保证通信的顺利进行


 工作过程
 主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；
 主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；
 当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：
 第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。
 第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。
 第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。
 第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。
 第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。

 RARP
 地址解析协议是根据IP地址获取物理地址的协议，而反向地址转换协议（RARP）是局域网的物理机器从网关服务器的ARP表或者缓存上根据MAC地址请求IP地址的协议，其功能与地址解析协议相反。与ARP相比，RARP的工作流程也相反。首先是查询主机向网路送出一个RARP Request广播封包，向别的主机查询自己的IP地址。这时候网络上的RARP服务器就会将发送端的IP地址用RARP Reply封包回应给查询者，这样查询主机就获得自己的IP地址了


代理ARP
 通常ARP包会被路由器隔离，但是采用代理ARP的路由器可以将代理ARP请求转发给领近的网段，由此 二个以上网段的节点之间可以像在同一网段中一样通信




ICMP协议
IP协议并不是一个可靠的协议，它不保证数据被送达，那么，自然的，保证数据送达的工作应该由其他的模块来完成。其中一个重要的模块就是ICMP(网络控制报文)协议

它是TCP/IP协议族的一个子协议，属于网络层协议，主要用于在主机与路由器之间传递控制信息，包括报告错误、交换受限控制和状态信息等。
当遇到IP数据无法访问目标、IP路由器无法按当前的传输速率转发数据包等情况时，会自动发送ICMP消息。


组成
ICMP不象TCP或UDP有端口，但它确实含有两个域：类型(type)和代码(code)。而且这些域的作用和端口也完全不同。
ICMP在网络层协议，不是用端口来说的，它的功能用类型来区别, Ping用到的是ICMP协议。不是端口。


 ICMP报文的格式
1.   类型：占8位
2.   代码：占8位
3.   检验和：占16位


类型
ICMP就是一个“错误侦测与回报机制”，消息大致可分为二类，
一类是通知出错原因的错误消息（差错报文）
另一类是用于诊断的查询信息（查询报文）





《消息种类 ICMP 差错报文》


目标不可达到消息: 当路由器收到一个无法传递下去的IP报文时，会发送ICMP目的不可达报文（Type为3）给IP报文的源发送方。报文中的Code就表示发送失败的原因。
 终点不可达分为:网络不可达，主机不可达，协议不可达，端口不可达，需要分片但DF比特已置为1，以及源路由失败等六种情况，其代码字段分别置为0至5。当出现以上六种情况时就向源站发送终点不可达报文。
 说明：端口不可达：UDP的规则之一是：如果收到UDP数据报而且目的端口与某个正在使用的进程不相符，那么UDP返回一个ICMP不可达报文。

重定向消息: 当路由器检测到一台机器使用非优化路由的时候，它会向该主机发送一个ICMP重定向报文，请求主机改变路由。路由器也会把初始数据包向它的目的地转发

超时消息: 网络传输IP数据报的过程中，如果IP数据包的TTL值逐渐递减为0时，需要丢弃数据报。这时，路由器需要向源发送方发送ICMP超时报文(Type为11)，Code为0，表示传输过程中超时了。
一个IP数据报可能会因为过大而被分片，然后在目的主机侧把所有的分片重组。如果主机迟迟没有等到所有的分片报文，就会向源发送方发送一个ICMP超时报文，Code为1，表示分片重组超时了。

参数错误消息: 当路由器或主机处理数据报时，发现因为报文头的参数错误而不得不丢弃报文时，需要向源发送方发送参数错误报文(Type为12)。当Code为0时，报文中的Pointer表示错误的字节位置。

源冷却: 路由器在处理报文时会有一个缓存队列。如果超过最大缓存队列，将无法处理，从而丢弃报文。并向源发送方发一个ICMP源冷却报文(Type为4)，告诉对方：“嘿，我这里客满了，你迟点再来。
 原点抑制消息: 当 TCP/IP 主机发送数据到另一主机时，如果速度达到路由器或者链路的饱和状态，路由器发出一个 ICMP 源抑制消息。


《消息种类 ICMP 查询报文》

回送消息: 用于进行通信的主机或路由之间，判断发送数据包是否成功到达对端的消息。可以向对端主机发送回送请求消息，也可以接收对端主机回来的回送应答消息.Ping就是用这种报文进行查询和回应

地址掩码消息: 主要用于主机或路由想要了解子网掩码的情况。可以向那些主机或路由器发送 ICMP 地址掩码请求消息，然后通过接收 ICMP 地址掩码应答消息获取子网掩码信息。

时间戳或时间戳请求: 时间戳报文是用来记录收发以及传输时间的报文。Originate Timestamp记录的是发送方发送报文的时刻；Receive Timestamp记录的是接收方收到报文的时刻；Transmit Timestamp表示回显这最后发送报文的时刻。





Ping 程序

Ping 程序利用 ICMP 回显请求报文和回显应答报文(而不用经过传输层)来测试目标主机是否可达。它是一个检查系统连接性的基本诊断工具

ping 程序是用来探测主机到主机之间是否可通信，如果不能ping到某台主机，表明不能和这台主机建立连接。ping 使用的是ICMP协议，它发送icmp回送请求消息给目的主机。ICMP协议规定：目的主机必须返回ICMP回送应答消息给源主机。如果源主机在一定时间内收到应答，则认为主机可达。
ICMP协议通过IP协议发送的，IP协议是一种无连接的，不可靠的数据包协议。在Unix/Linux，序列号从0开始计数，依次递增。而Windows　ping程序的ICMP序列号是没有规律。
ICMP协议在实际传输中数据包：20字节IP首部 + 8字节ICMP首部+ 1472字节<数据大小>38字节
ICMP报文格式:IP首部(20字节)+8位类型+8位代码+16位校验和+(不同的类型和代码，格式也有所不同)

Ping工作过程——
ICMP 回显请求和 ICMP 回显应答报文是配合工作的。当源主机向目标主机发送了 ICMP 回显请求数据包后，它期待着目标主机的回答。目标主机在收到一个 ICMP 回显请求数据包后，它会交换源、目的主机的地址，然后将收到的 ICMP 回显请求数据包中的数据部分原封不动地封装在自己的 ICMP 回显应答数据包中，然后发回给发送 ICMP 回显请求的一方。如果校验正确，发送者便认为目标主机的回显服务正常，也即物理连接畅通。


Traceroute
Traceroute 程序主要用来侦测源主机到目的主机之间所经过的路由的情况。

Traceroute 使用 ICMP 报文和 IP 首部中的 TTL 字段，它充分利用了 ICMP 超时消息。其原理很简单，开始时发送一个 TTL 字段为 1 的 UDP 数据报，而后每次收到 ICMP 超时萧后，按顺序再发送一个 TTL 字段加 1 的 UDP 数据报，以确定路径中的每个路由器，而每个路由器在丢弃 UDP 数据报时都会返回一个 ICMP 超时报文，而最终到达目的主机后，由于 ICM P选择了一个不可能的值作为 UDP 端口(大于30000)。这样目的主机就会发送一个端口不可达的 ICMP 差错报文





DHCP

是一个局域网的网络协议，使用UDP协议工作， 主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段
 ，在RFC 2131中有详细的描述。DHCP有3个端口，其中UDP67和UDP68为正常的DHCP服务端口，分别作为DHCP Server和DHCP Client的服务端口；
 546号端口用于DHCPv6 Client，而不用于DHCPv4，是为DHCP failover服务，这是需要特别开启的服务，DHCP failover是用来做“双机热备”的

它的前身是 BOOTP。BOOTP 原本是用于无磁盘主机连接的网络上面的：网络主机使用 BOOT ROM 而不是磁盘起动并连接上网络，BOOTP 则可以自动地为那些主机设定 TCP/IP 环境。

 DHCP Client：DHCP客户端，通过DHCP协议请求IP地址的客户端。DHCP客户端是接口级的概念，如果一个主机有多个以太接口，则该主机上的每个接口都可以配置成一个DHCP 客户端。交换机上每个Vlan接口也可以配置成一个DHCP客户端。
 DHCP Server：DHCP 服务端，负责为DHCP客户端提供IP地址，并且负责管理分配的IP地址。
 DHCP Relay：DHCP中继器，DHCP客户端跨网段申请IP地址的时候，实现DHCP报文的转发功能。
 DHCP Security：DHCP安全特性，实现合法用户IP地址表的管理功能
 DHCP Snooping：DHCP监听，记录通过二层设备申请到IP地址的用户信息



 发现阶段：
 即DHCP客户端寻找DHCP服务端的过程，对应于客户端发送DHCP Discovery，因为DHCP Server对应于DHCP客户端是未知的，所以DHCP 客户端发出的DHCP Discovery报文是广播包，源地址为0.0.0.0目的地址为255.255.255.255。网络上的所有支持TCP/IP的主机都会收到该DHCP Discovery报文，但是只有DHCP Server会响应该报文。
 如果网络中存在多个DHCP Server，则多个DHCP Server均会回复该DHCP Discovery报文。
 如果同一个vlan内没有DHCP Server，而该VlanIf配置了DHCP Relay功能，则该Vlanif即为DHCP中继，DHCP中继会将该DHCP报文的源IP地址修改为该Vlanif的IP地址，而目的地址则为DHCP Relay配置的DHCP Server的IP地址。同时修改DHCP报文中，giaddress为VlanIf的IP地址。并以单播将DHCP Discovery发送到DHCP Server端。


 DHCP Server 提供阶段：
 DHCP Server提供阶段，即为DHCP Server响应DHCP Discovery所发的DHCP Offer阶段
 DHCP Server收到DHCP Discovery报文后，解析该报文请求IP地址所属的Subnet。并从dhcpd.conf文件中与之匹配的subnet中取出一个可用的IP地址(从可用地址段选择一个IP地址后，首先发送ICMP报文来ping该IP地址，如果收到该IP地址的ICMP报文，则抛弃该IP地址，重新选择IP地址继续进行ICMP报文测试，直到找到一个网络中没有人使用的IP地址，用以达到防治动态分配的IP地址与网络中其他设备IP地址冲突，这个IP地址冲突检测机制，可配置)，设置在DHCP Discovery报文中yiaddress字段中，表示为该客户端分配的IP地址，并且为该Lease设置该Subnet配置的Option，例如默认leases租期，最大租期，router等信息。
 DHCP从地址池中选择IP地址，以如下优先级进行选择：
 1、当前已经存在的Ip Mac的对应关系
 2、Client以前的IP地址
 3、读取Discovery报文中的Requested Ip Address Option的值，如果存在并且IP地址可用
 4、从配置的Subnet中选择IP地址：
 DHCP Server解析DHCP Discovery请求的IP所属的Subnet，首先看该DHCP Discovery报文中giaddress是否有DHCP Relay，如果有，则从giaddress所述的subnet中可用IP地址段中获取，并分配IP。如果giaddress没有IP地址，则从该DHCP Server绑定的接口的IP地址所属的网段分配IP地址。


 DHCP Client 选择阶段：
 DHCP Client收到若干个DHCP Server响应的DHCP Offer报文后，选择其中一个DHCP Server作为目标DHCP Server。选择策略通常为选择第一个响应的DHCP Offer报文所属的DHCP Server。
 然后以广播方式回答一个DHCP Request报文，该报文中包含向目标DHCP请求的IP地址等信息。之所以是以广播方式发出的，是为了通知其他DHCP Server自己将选择该DHCP Server所提供的IP地址。
 DHCP Server确认阶段：
 当DHCP Server收到DHCP Client发送的DHCP Request后，确认要为该DHCP Client提供的IP地址后，便想该DHCP Client响应一个包含该IP地址以及其他Option的报文，来告诉DHCP Client可以使用该IP地址了。然后DHCP Client即可以将该IP地址与网卡绑定。另外其他DHCP Server都将收回自己之前为DHCP Client提供的IP地址。

 DHCP Client重新登录网络：
 当DHCP Client重新登录后，发送一个以包含之前DHCP Server分配的IP地址信息的DHCP Request报文，当DHCP Server收到该请求后，会尝试让DHCP客户端继续使用该IP地址。并回答一个ACK报文。
 但是如果该IP地址无法再次分配给该DHCP Client后，DHCP回复一个NAK报文，当DHCP Client收到该NAK报文后，会重新发送DHCP Discovery报文来重新获取IP地址。

 DHCP Client更新租约：
 DHCP获取到的IP地址都有一个租约，租约过期后，DHCP Server将回收该IP地址，所以如果DHCP Client如果想继续使用该IP地址，则必须更新器租约。更新的方式就是，当当前租约期限过了一半后，DHCP Client都会发送DHCP Renew报文来续约租期。






《传输层》

 什么是传输层协议
 当在Windows XP中同时运行多个网络应用程序时，每个应用程序都会产生自己的数据流，传输层是用什么方法区分不同应用程序的数据流呢？
在数据流被分段(分组)以后，传输层依靠什么来重新组装这些数据流呢？
 如果某个数据段在传输过冲中丢失了或重复了，可靠的传输协议依据什么去要求重传这些数据或丢弃多余的数据呢？

 传输层的主要功能是分割并重新组装上层提供的数据流，为数据流提供端对端的传输服务。

 在TCP/IP协议中，有两个传输层协议：
 传输控制协议(TCP)： TCP是一个可靠的面向连接的协议
 用户数据包协议(UDP)：UDP是不可靠的或非连接的协议



通信过程
TCP/IP 的众多应用协议大多以客户端、服务端的形式运行。通过其对于的守护进程来处理请求。
HTTP的服务端程序--httpd守护进程
ssh的服务端程序---sshd守护进程
超级守护进程--inetd互联网守护进程

 一个通信的识别
 因为通信环境的复杂，仅凭目标端口识别某一个通信是远远不够的，TCP/IP 或者 UDP/IP 通信中通常采用5个信息来识别一个通信
 “源IP地址”、“目标IP地址”、“源协议号”、“源端口号”、“目标端口号”


网络进程间通信：socket API简介(套接字)
    应用层通过传输层进行数据通信时，TCP和UDP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要 通过同一个TCP协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了称为套接字 (Socket)的接口，区分不同应用程序进程间的网络通信和连接。

    源IP地址和目的IP地址以及源端口号和目的端口号的组合称为套接字。其用于标识客户端请求的服务器和服务。
    它是网络通信过程中端点的抽象表示，包含进行网络通信必需的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。
    套接字，是支持TCP/IP的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程

    常用的TCP/IP协议的3种套接字类型如下所示。
        流套接字（SOCK_STREAM）：
        流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复发送，并按顺序接收。流套接字之所以能够实现可靠的数据服务，原因在于其使用了传输控制协议，即TCP（The Transmission Control Protocol）协议。

        数据报套接字（SOCK_DGRAM）:
        数据报套接字提供了一种无连接的服务。该服务并不能保证数据传输的可靠性，数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。
         数据报套接字使用UDP（User Datagram Protocol）协议进行数据的传输。由于数据报套接字不能保证数据传输的可靠性，对于有可能出现的数据丢失情况，需要在程序中做相应的处理。

        原始套接字（SOCK_RAW）：
        原始套接字(SOCKET_RAW)允许对较低层次的协议直接访问，比如IP、 ICMP协议，它常用于检验新的协议实现，或者访问现有服务中配置的新设备，因为RAW SOCKET可以自如地控制Windows下的多种协议，能够对网络底层的传输机制进行控制，所以可以应用原始套接字来操纵网络层和传输层应用。比如，我们可以通过RAW SOCKET来接收发向本机的ICMP、IGMP协议包，或者接收TCP/IP栈不能够处理的IP包，也可以用来发送一些自定包头或自定协议的IP包。网络监听技术很大程度上依赖于SOCKET_RAW
        原始套接字与标准套接字（标准套接字指的是前面介绍的流套接字和数据包套接字）的区别在于：原始套接字可以读写内核没有处理的IP数据包，而流套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据。因此，如果要访问其他协议发送数据必须使用原始套接字。


端口号作用
.在网络层的IP包中，有IP部首中的相关字段指明其传输的是什么类型的协议内容，是TCP的还是UDP得
.在传输层中有，端口号来指定识别在传输层上一层应用层中所要进行处理的具体程序
传输层协议TCP/UDP通过接受数据中的目标端口号识别目标处理程序

端口有什么用呢？我们知道，一台拥有IP地址的主机可以提供许多服务，比如Web服务、FTP服务、SMTP服务等，这些服务完全可以通过1个IP地址来实现。
那么，主机是怎样区分不同的网络服务呢？显然不能只靠IP地址，因为IP 地址与网络服务的关系是一对多的关系。实际上是通过“IP地址+端口号”来区 分不同的服务的


端口号确定
A:标准既定的端口号
服务器一般都是通过知名端口号来识别的，知名端口即众所周知的端口号，范围从0到1023，这些端口号一般固定分配给一些服务。比如21端口分配给FTP(文件传输协议)服务，25端口分配给SMTP（简单邮件传输协议）服务，80端口分配给HTTP服务，135端口分配给RPC（远程过程调用）服务等等。
网络服务是可以使用其他端口号的，如果不是默认的端口号则应该在地址栏上指定端口号，方法是在地址后面加上冒号“:”（半角），再加上端口 号。比如使用“8080”作为WWW服务的端口，则需要在地址栏里输入“：8080”。

B：时序分配法
动态端口的范围从1024到65535，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用



UDP
UDP协议全称是用户数据报协议[1]  ，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点


TCP
TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1]  另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换


 */
@interface HBConditionalRouterPort ()

@property (nonatomic,copy) NSString *quickDomain; // 条件单选线域名
@property (nonatomic,copy) NSString *defaultDomain; // 条件单默认域名
@property (nonatomic,strong) NSMutableArray *ApiInfoArray; // 条件单api选线列表

@end


@implementation HBConditionalRouterPort

static HBConditionalRouterPort *_instance;

//url = http://140.207.241.190:9009
//url = http://116.228.234.69:9009
//url = http://120.204.239.212:9009

- (void)sendPortAndIpArray:(NSMutableArray<HBConditionalRouterModel *> *)array{

    self.quickDomain = nil;
    return;

    if (array.count > 0) {

        //        self.quickDomain = @"http://140.207.241.190:9009";
        //        self.quickDomain = @"http://116.228.234.69:9009";
        //        self.quickDomain = @"http://120.204.239.212:9009";

        //        return;
        NSMutableArray *muArray = [NSMutableArray array];

        //        NSString *url = [NSString stringWithFormat:@"http://140.207.241.190:9009/network/speedTest.html"];
        //        NSLog(@"url = %@",url);
        //        [muArray addObject:url];

        for (HBConditionalRouterModel *model in array) {
            if (model.routeIp && model.routePort) {
                NSString *url = [NSString stringWithFormat:@"http://%@:%@/network/speedTest.html",model.routeIp,model.routePort];
                NSLog(@"url = %@",url);
                [muArray addObject:url];
            }
        }



        [[HBCheckSpeed shareCheckSpeed] checkResponseTimeByUrlList:muArray responseBlock:^(NSArray * urlList){
            if (urlList.count > 0) {
                NSString *str = urlList.firstObject;
                self.quickDomain = [str substringToIndex:str.length - 23];
                NSLog(@"self.quickDomain = %@",self.quickDomain);
            }
        }];

    }else{
        self.quickDomain = nil;
    }
}

- (void)sendApiInfoArray:(NSMutableArray<HBCondotionalApiInfoModel *> *)array{
    if (array.count) {
//        for (HBCondotionalApiInfoModel *model in array) {
//            NSLog(@"服务列表:%@.%@",model.apiName,model.apiMethod);
//        }
        self.ApiInfoArray = [array mutableCopy];
    }else{
        [self.ApiInfoArray removeAllObjects];
        self.ApiInfoArray = nil;
    }
}


- (NSString *)getDomainWithApiName:(NSString *)apiName andApiMethod:(NSString *)apiMethod{
    // 根据服务名，方法名比对看是否需求选线
    if (self.quickDomain.length > 0 && self.ApiInfoArray.count > 0) { // 在有测速成功的情况下

        for (HBCondotionalApiInfoModel *model in self.ApiInfoArray) {
            if ([apiName isEqualToString:model.apiName] && [apiMethod isEqualToString:model.apiMethod] ) {
                return self.quickDomain;
            }
        }
    }

    return self.defaultDomain;
}



+(instancetype)allocWithZone:(struct _NSZone *)zone{

    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        if (_instance == nil) {
            _instance = [super allocWithZone:zone];
        }
    });
    return _instance;
}

+(instancetype)shareRouterPort{

    return [[self alloc]init];
}

-(id)copyWithZone:(NSZone *)zone{
    return _instance;
}
-(id)mutableCopyWithZone:(NSZone *)zone{
    return _instance;
}



- (NSString *)defaultDomain{
    if (!_defaultDomain) {
        _defaultDomain = [NSString stringWithFormat:@"%@/%@",[HBNetworkConfig config].domains.connectionDomain,[HBNetworkConfig config].apiPath.cgPath];
    }
    return _defaultDomain;
}
@end




@implementation HBConditionalRouterModel

@end

@implementation HBCondotionalApiInfoModel
@end
/*


 计算机主机网关的作用是什么？ 假设你的名字叫小不点，你住在一个大院子里，你的邻居有很多小伙伴，在门口传达室还有个看大门的李大爷，李大爷就是你的网关。当你想跟院子里的某个小伙伴玩，只要你在院子里大喊一声他的名字，他听到了就会回应你，并且跑出来跟你玩。 但是你不被允许走出大门，你想与外界发生的一切联系，都必须由门口的李大爷（网关）用电话帮助你联系。假如你想找你的同学小明聊天，小明家住在很远的另外一个院子里，他家的院子里也有一个看门的王大爷（小明的网关）。但是你不知道小明家的电话号码，不过你的班主任老师有一份你们班全体同学的名单和电话号码对照表，你的老师就是你的DNS服务器。于是你在家里拨通了门口李大爷的电话，有了下面的对话： 小不点：李大爷，我想找班主任查一下小明的电话号码行吗？ 李大爷：好，你等着。（接着李大爷给你的班主任挂了一个电话，问清楚 了小明的电话）问到了，他家的号码是211.99.99.99 小不点：太好了！李大爷，我想找小明，你再帮我联系一下小明吧。 李大爷：没问题。（接着李大爷向电话局发出了请求接通小明家电话的请 求，最后一关当然是被转接到了小明家那个院子的王大爷那里，然后王大 爷把电话给转到小明家） 就这样你和小明取得了联系。 至于DHCP服务器嘛，可以这样比喻： 你家院子里的居民越来越多了，传达室李大爷那里的电话交换机已经不能满足这么多居民的需求了，所以只好采用了一种新技术叫做DHCP，居民们开机的时候随机得到一个电话号码，每一次得到的号码都可能会不同。 你家门口的李大爷：就是你的网关 你的班主任：就是你的DNS服务器 传达室的电话交换机：就是你的DHCP服务器 同上，李大爷和王大爷之间的对话就叫做路由。 另：如果还有个小朋友叫做小暗，他住的院子看门的是孙大爷，因为小暗的院子刚盖好，孙大爷刚来不久，他没有李大爷和王大爷办公室的电话（李大爷和王大爷当然也没有他的电话），这时会有两种情况：


 1、居委会的赵大妈告诉了孙大爷关于李、王两位大爷的电话（同时赵大妈也告诉了李、王关于孙的电话），这就叫静态设定路由 2、赵大妈病了，孙大爷自己到处打电话，见人就说：“我是小暗他们院子管电话的”，结果被李、王二位听到了，就记在了他们的通讯录上，然后李、王就给孙大爷回了个电话说：“我是小明（小不点）他们院子管电话的”，这就叫动态设定路由 然后有一天小不点要找小暗，结果自然是小不点给李大爷打电话说：“大爷，我找小暗”（这里省略了李大爷去查小暗电话的过程，假设他知道小暗的电话），李大爷一找通讯录：“哦，小暗的院子的电话是孙大爷管着的，要找小暗自然先要通知孙大爷，我可以通知王大爷让他去找孙大爷，也可以自己直接找孙，那当然是自己直接找孙方便了”，于是李大爷给孙大爷打了电话，然后孙大爷又把电话转到了小暗家。 这里李大爷的通讯录叫做路由表。 李大爷选择是自己直接找孙大爷还是让王大爷帮忙转接叫做路由选择。 李大爷之所以选择直接找孙大爷是有依据的，因为他直接找孙大爷就能一步到位，如果要王大爷转接就需要两步才能完成，这里的“步”叫做“跳数”，李大爷的选择遵循的是最少步骤（跳数）原则（如果他不遵守这个原则，小不点可能就会多等些时间才能找到小暗，最终结果可能导致李大爷因工作不力被炒鱿鱼，这叫做“延时太长，选路原则不合理，换了一个路由器”） 当然，事情总是变化的，小不点和小明吵架了，这些天小不点老是给小暗打电话，小明心里想：“操，他是不是在说我坏话啊？”于是小明决定偷听小不点和小暗的通话，但是他又不能出院子，怎么办呢？小明做了这样一个决定： 首先他告诉自己院里管电话的王大爷说：“你给李大爷打个电话说小暗搬到咱们院子了，以后凡是打给他的电话我来接”，王大爷没反映过来（毕竟年纪大了啊！）就给李大爷打了电话，说：“现在我来管理小暗的电话了，孙已经不管了”，结果李大爷就把他的通讯录改了，这叫做路由欺骗。 以后小不点再找小暗，李大爷就转给王大爷了（其实应该转给孙大爷的），王大爷收到了这个电话就转给了小明（因为他之前已经和小明说好了），小明收到这个电话就假装小暗和小不点通信。因为小明作贼心虚，害怕明天小不点和小暗见面后当面问他，于是通信断了之后，又自己以小不点的名义给小暗通了个电话复述了一遍刚才的话，有这就叫数据窃听 再后来，小不点还是不断的和小暗联系，而零落了小明，小明心里嘀咕啊：“我不能总是这样以小暗的身份和小不点通话啊，外一有一天露馅了怎么办！”于是他想了一个更阴险的招数：“干脆我也不偷听你们的电话了，你小不点不是不给我打电话吗！那我让你也给小暗打不了，哼哼！”，他怎么做的呢？我们来看： 他联系了一批狐朋狗友，和他们串通好，每天固定一个时间大家一起给小暗院子传达室打电话，内容什么都有，只要传达室的孙爷爷接电话，就会听到“打雷啦，下雨收衣服啊！”、“人是人他妈生的，妖是妖他妈生的”、“你妈贵姓”等等，听的脑袋都大了，不听又不行，电话不停的响啊！终于有一天，孙爷爷忍不住了，大喊一声：“我受不了拉！！！！”，于是上吊自杀了！ 这就是最简单的DDOS攻击，孙爷爷心理承受能力弱的现象叫做“数据报处理模块有BUG”，孙爷爷的自杀叫做“路由器瘫痪”。如果是我，就会微笑着和他们拉家常，例如告诉他们“我早就听了天气预报，衣服10分钟前已经收好了”或者“那你妈是人还是妖”或者“和你奶奶一个姓”等等，我这种健全的心理叫做“健壮的数据报处理，能够抵御任何攻击”
 


 孙爷爷瘫了之后，小不点终于不再给小暗打电话了，因为无论他怎么打对方都是忙音，这种现象叫做“拒绝服务”，所以小明的做法还有一个名字叫做“拒绝服务攻击”。 小明终于安静了几天，... 几天后，小明的院子来了一个美丽的女孩，名字叫做小丽，小明很喜欢她（小小年纪玩什么早恋！）可是小丽有个很帅的男朋友，小明干瞪眼没办法。当然这里还是要遵循上面的原则：小丽是不能出院子的。那个男的想泡小丽自然只能打电话，于是小明又蠢蠢欲动了： 还记得王爷爷是院子的电话总管吗？他之所以能管理电话是因为他有一个通讯录，因为同一个院子可能有2个孩子都叫小明，靠名字无法区分，所以通讯录上每一行只有两项： 门牌电话 一号门 1234567 （这个是小明的） 二号门 7654321 （这个是小丽的） ...... 王爷爷记性不好，但这总不会错了吧（同一个院子不会有2个“二号门”吧）？每次打电话人家都要说出要找的电话号码，然后通过通讯录去院子里面敲门，比如人家说我找“1234567”，于是王爷爷一比较，哦，是一号门的，他就去敲一号门“听电话”，如果是找“7654321”，那他就找二号门“听电话”。 这里的电话号码就是传说中的“IP地址” 这里的门牌号就是传说中的网卡的’MAC‘地址（每一块网卡的MAC地址都是不一样的，这是网卡的制造商写死在网卡的芯片中的） 小明心里想“奶奶的，老子泡不到你也别想泡”，于是他打起了王爷爷通讯录的主意，经过细心的观察，周密的准备，他终于发现王爷爷有尿频的毛病（毕竟是老人啊...），终于在一个月黑风高的白天，王爷爷去上厕所了，小明偷偷的摸进传达室，小心翼翼的改了王爷爷的通讯录...... 过了几天，小丽的男朋友又给小丽打来了电话，对方报的电话是“7654321”，王爷爷一看通讯录，靠： 门牌电话 一号门 1234567 （这个是小明的） 一号门 7654321 （注意：这个原来是小丽的，但是被小明改了） ...... 王爷爷不知道改了啊，于是就去找一号门的小明了，小明心里这个美啊，他以小丽父亲的口吻严厉的教训了那个男的和小丽之间不正当的男女关系，结果那个男的恭恭敬敬的挂了电话。当然小丽并不知道整个事情的发生... 这里小明的行为叫做“ARP欺骗”（因为在实际的网络上是通过发送ARP数据包来实现的，所以叫做“ARP欺骗”），王爷爷的通讯录叫做“ARP表” 这里要注意：王爷爷现在有两个通讯录了，一个是记录每个院子传达室电话的本本，叫做“路由表”，一个是现在说的记录院子里面详细信息的本本，叫做“ARP表”。 有句命言是“人们总是在追求完美的，尽管永远也做不到”（请记住这句话，因为这是一个大名人--也就是我，说的）

 王爷爷的制度中有一条是这么写的“每个月要重新检查一下门牌号和电话的对应本（也就是ARP表）”，这个动作叫做“刷新ARP表”，每个月的时间限制叫做“刷新ARP表的周期”。这样小明为了让那个男的永远不能找到小丽，之后每个月都要偷偷改一次那个通讯录，不过这样也是不得不做的事啊！ 补充一点，小明是很聪明的，如果通讯录（ARP表）被改成了这样： 门牌（MAC）电话（IP） 一号门 1234567 （这个是小明的） 二号门 1234567 （注意：这个被小明改了，但是他一时头晕改错了） ...... 就会是计算机就会弹出一个对话框提示“出现重复的IP地址”，最终会导致王爷爷不知所措，于是通知一号门和二号门，你们的电话重复了。这样小丽就知道有人在破坏她的好事，这个现象叫做“骗局被揭穿了” 小不点知道了小明偷听他和小暗的电话，于是就和小暗约定好了密码。小不点在家里把要说的加密了之后告诉小暗。土豆－〉星期三，地瓜－〉请客，笨蛋－〉小不点家。于是小不点告诉小暗：土豆笨蛋地瓜。小明听了？？？不懂。。。。郁闷了。。。这是加密。 除此之外，小丽也知道了小明改他家的电话号码了。于是王爷爷就登门一个一个把电话和门牌号记下来。并且藏起来不允许外人修改，只能自己有钥匙（密码）。这是ip地址和MAC地址绑定。当有人改了电话号码的时候，就得找王爷爷改。麻烦是麻烦了，但是安全了。不过小明偷偷的把王爷爷的钥匙偷配了一把（盗窃密码成功），于是他还可以修改。这样么，就这样了。
 */
